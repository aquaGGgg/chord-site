{"ast":null,"code":"// services/songsService.js\n\n// Функция для получения песен с бекенда\nasync function fetchSongs() {\n  try {\n    const response = await fetch('/api/songs');\n    if (!response.ok) {\n      throw new Error(`Ошибка сети: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Ошибка при получении песен с бекенда:\", error);\n    return [];\n  }\n}\n\n// Возвращает список уникальных авторов, взятых из бекенда\nasync function getAuthors() {\n  const songs = await fetchSongs();\n  return [...new Set(songs.map(song => song.author))];\n}\n\n// Возвращает список песен для конкретного автора\nasync function getSongsByAuthor(authorName) {\n  const songs = await fetchSongs();\n  return songs.filter(song => song.author === authorName);\n}\n\n// Возвращает одну песню по её ID\nasync function getSong(songId) {\n  const songs = await fetchSongs();\n  return songs.find(song => song.id === songId);\n}\nexport default {\n  getAuthors,\n  getSongsByAuthor,\n  getSong\n};","map":{"version":3,"names":["fetchSongs","response","fetch","ok","Error","status","data","json","error","console","getAuthors","songs","Set","map","song","author","getSongsByAuthor","authorName","filter","getSong","songId","find","id"],"sources":["M:/chord-site/src/services/songsService.js"],"sourcesContent":["// services/songsService.js\r\n\r\n// Функция для получения песен с бекенда\r\nasync function fetchSongs() {\r\n  try {\r\n    const response = await fetch('/api/songs');\r\n    if (!response.ok) {\r\n      throw new Error(`Ошибка сети: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(\"Ошибка при получении песен с бекенда:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Возвращает список уникальных авторов, взятых из бекенда\r\nasync function getAuthors() {\r\n  const songs = await fetchSongs();\r\n  return [...new Set(songs.map(song => song.author))];\r\n}\r\n\r\n// Возвращает список песен для конкретного автора\r\nasync function getSongsByAuthor(authorName) {\r\n  const songs = await fetchSongs();\r\n  return songs.filter(song => song.author === authorName);\r\n}\r\n\r\n// Возвращает одну песню по её ID\r\nasync function getSong(songId) {\r\n  const songs = await fetchSongs();\r\n  return songs.find(song => song.id === songId);\r\n}\r\n\r\nexport default {\r\n  getAuthors,\r\n  getSongsByAuthor,\r\n  getSong\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA,eAAeA,UAAUA,CAAA,EAAG;EAC1B,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,CAAC;IAC1C,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,gBAAgBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IACpD;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC7D,OAAO,EAAE;EACX;AACF;;AAEA;AACA,eAAeE,UAAUA,CAAA,EAAG;EAC1B,MAAMC,KAAK,GAAG,MAAMX,UAAU,CAAC,CAAC;EAChC,OAAO,CAAC,GAAG,IAAIY,GAAG,CAACD,KAAK,CAACE,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;AACrD;;AAEA;AACA,eAAeC,gBAAgBA,CAACC,UAAU,EAAE;EAC1C,MAAMN,KAAK,GAAG,MAAMX,UAAU,CAAC,CAAC;EAChC,OAAOW,KAAK,CAACO,MAAM,CAACJ,IAAI,IAAIA,IAAI,CAACC,MAAM,KAAKE,UAAU,CAAC;AACzD;;AAEA;AACA,eAAeE,OAAOA,CAACC,MAAM,EAAE;EAC7B,MAAMT,KAAK,GAAG,MAAMX,UAAU,CAAC,CAAC;EAChC,OAAOW,KAAK,CAACU,IAAI,CAACP,IAAI,IAAIA,IAAI,CAACQ,EAAE,KAAKF,MAAM,CAAC;AAC/C;AAEA,eAAe;EACbV,UAAU;EACVM,gBAAgB;EAChBG;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}