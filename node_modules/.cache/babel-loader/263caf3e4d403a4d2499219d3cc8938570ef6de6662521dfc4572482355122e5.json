{"ast":null,"code":"var _jsxFileName = \"E:\\\\Project\\\\front\\\\chord-site\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport jwt_decode from 'jwt-decode';\nimport authService from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\n  const [refreshToken, setRefreshToken] = useState(localStorage.getItem('refreshToken') || null);\n  useEffect(() => {\n    if (token) {\n      try {\n        const decoded = jwt_decode(token);\n        const userData = {\n          id: decoded.id,\n          email: decoded.email,\n          username: decoded.username || decoded.email,\n          role: decoded.role || 'User'\n        };\n        setUser(userData);\n      } catch (error) {\n        console.error(\"Ошибка при декодировании токена:\", error);\n        logout();\n      }\n    }\n  }, [token]);\n  const setAuthData = (accessToken, refreshToken, userData) => {\n    setToken(accessToken);\n    setRefreshToken(refreshToken);\n    setUser(userData);\n    localStorage.setItem('token', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n  };\n  const login = async (email, password) => {\n    try {\n      if (email === 'admin' && password === 'admin') {\n        const adminUser = {\n          id: 1,\n          email,\n          username: 'Administrator',\n          role: 'Admin'\n        };\n        setAuthData('fake-admin-token', 'fake-refresh-token', adminUser);\n        navigate('/profile');\n        return;\n      }\n      const data = await authService.login(email, password);\n      const decoded = jwt_decode(data.token || data.accessToken);\n      const userData = {\n        id: decoded.id,\n        email: decoded.email,\n        username: decoded.username || email,\n        role: decoded.role || 'User'\n      };\n      setAuthData(data.token || data.accessToken, data.refreshToken, userData);\n      navigate('/profile');\n    } catch (error) {\n      console.error(\"Ошибка при входе:\", error);\n      throw error;\n    }\n  };\n  const register = async (username, email, password) => {\n    try {\n      const data = await authService.register(username, email, password);\n      const decoded = jwt_decode(data.token || data.accessToken);\n      const userData = {\n        id: decoded.id,\n        email: decoded.email,\n        username: decoded.username || email,\n        role: decoded.role || 'User'\n      };\n      setAuthData(data.token || data.accessToken, data.refreshToken, userData);\n      navigate('/profile');\n    } catch (error) {\n      console.error(\"Ошибка при регистрации:\", error);\n      throw error;\n    }\n  };\n  const refreshAccessToken = async () => {\n    if (!refreshToken) return;\n    try {\n      const data = await authService.refreshToken(refreshToken);\n      const newAccessToken = data.token || data.accessToken;\n      setToken(newAccessToken);\n      localStorage.setItem('token', newAccessToken);\n    } catch (error) {\n      console.error(\"Ошибка при обновлении токена:\", error);\n      logout();\n    }\n  };\n  const logout = () => {\n    setToken(null);\n    setRefreshToken(null);\n    setUser(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n    navigate('/login');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      refreshToken,\n      login,\n      register,\n      logout,\n      refreshAccessToken\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"UwW3ekfK0l6vLUXKoA/CcE3C5Lw=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useNavigate","jwt_decode","authService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","navigate","user","setUser","token","setToken","localStorage","getItem","refreshToken","setRefreshToken","decoded","userData","id","email","username","role","error","console","logout","setAuthData","accessToken","setItem","login","password","adminUser","data","register","refreshAccessToken","newAccessToken","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Project/front/chord-site/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport jwt_decode from 'jwt-decode';\r\nimport authService from '../services/authService';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const navigate = useNavigate();\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\r\n  const [refreshToken, setRefreshToken] = useState(localStorage.getItem('refreshToken') || null);\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      try {\r\n        const decoded = jwt_decode(token);\r\n        const userData = {\r\n          id: decoded.id,\r\n          email: decoded.email,\r\n          username: decoded.username || decoded.email,\r\n          role: decoded.role || 'User'\r\n        };\r\n        setUser(userData);\r\n      } catch (error) {\r\n        console.error(\"Ошибка при декодировании токена:\", error);\r\n        logout();\r\n      }\r\n    }\r\n  }, [token]);\r\n\r\n  const setAuthData = (accessToken, refreshToken, userData) => {\r\n    setToken(accessToken);\r\n    setRefreshToken(refreshToken);\r\n    setUser(userData);\r\n\r\n    localStorage.setItem('token', accessToken);\r\n    localStorage.setItem('refreshToken', refreshToken);\r\n  };\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      if (email === 'admin' && password === 'admin') {\r\n        const adminUser = { id: 1, email, username: 'Administrator', role: 'Admin' };\r\n        setAuthData('fake-admin-token', 'fake-refresh-token', adminUser);\r\n        navigate('/profile');\r\n        return;\r\n      }\r\n\r\n      const data = await authService.login(email, password);\r\n      const decoded = jwt_decode(data.token || data.accessToken);\r\n      const userData = {\r\n        id: decoded.id,\r\n        email: decoded.email,\r\n        username: decoded.username || email,\r\n        role: decoded.role || 'User'\r\n      };\r\n\r\n      setAuthData(data.token || data.accessToken, data.refreshToken, userData);\r\n      navigate('/profile');\r\n    } catch (error) {\r\n      console.error(\"Ошибка при входе:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (username, email, password) => {\r\n    try {\r\n      const data = await authService.register(username, email, password);\r\n      const decoded = jwt_decode(data.token || data.accessToken);\r\n      const userData = {\r\n        id: decoded.id,\r\n        email: decoded.email,\r\n        username: decoded.username || email,\r\n        role: decoded.role || 'User'\r\n      };\r\n\r\n      setAuthData(data.token || data.accessToken, data.refreshToken, userData);\r\n      navigate('/profile');\r\n    } catch (error) {\r\n      console.error(\"Ошибка при регистрации:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const refreshAccessToken = async () => {\r\n    if (!refreshToken) return;\r\n\r\n    try {\r\n      const data = await authService.refreshToken(refreshToken);\r\n      const newAccessToken = data.token || data.accessToken;\r\n      setToken(newAccessToken);\r\n      localStorage.setItem('token', newAccessToken);\r\n    } catch (error) {\r\n      console.error(\"Ошибка при обновлении токена:\", error);\r\n      logout();\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setToken(null);\r\n    setRefreshToken(null);\r\n    setUser(null);\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('refreshToken');\r\n    navigate('/login');\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ user, token, refreshToken, login, register, logout, refreshAccessToken }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}