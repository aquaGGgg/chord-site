{"ast":null,"code":"var _jsxFileName = \"E:\\\\Project\\\\front\\\\chord-site\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport authService from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\n  const [refreshToken, setRefreshToken] = useState(localStorage.getItem('refreshToken') || null);\n  useEffect(() => {\n    if (token) {\n      try {\n        const storedUser = localStorage.getItem('user');\n        if (storedUser) {\n          setUser(JSON.parse(storedUser));\n        }\n      } catch (error) {\n        console.error(\"Ошибка при загрузке пользователя из localStorage:\", error);\n        logout();\n      }\n    }\n  }, [token]);\n  const setAuthData = (accessToken, refreshToken, userData) => {\n    setToken(accessToken);\n    setRefreshToken(refreshToken);\n    setUser(userData);\n    localStorage.setItem('token', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n    localStorage.setItem('user', JSON.stringify(userData));\n  };\n  const login = async (email, password) => {\n    try {\n      if (email === 'admin' && password === 'admin') {\n        const adminUser = {\n          id: 1,\n          email,\n          username: 'Administrator',\n          role: 'Admin'\n        };\n        setAuthData('fake-admin-token', 'fake-refresh-token', adminUser);\n        navigate('/profile');\n        return;\n      }\n      const data = await authService.login(email, password);\n      const userData = {\n        id: data.userId || 0,\n        email: email,\n        username: data.username || email,\n        role: data.role || 'User'\n      };\n      setAuthData(data.token || data.accessToken, data.refreshToken, userData);\n      navigate('/profile');\n    } catch (error) {\n      console.error(\"Ошибка при входе:\", error);\n      throw error;\n    }\n  };\n  const register = async (username, email, password) => {\n    try {\n      const data = await authService.register(username, email, password);\n      const userData = {\n        id: data.userId || 0,\n        email,\n        username,\n        role: data.role || 'User'\n      };\n      setAuthData(data.token || data.accessToken, data.refreshToken, userData);\n      navigate('/profile');\n    } catch (error) {\n      console.error(\"Ошибка при регистрации:\", error);\n      throw error;\n    }\n  };\n  const refreshAccessToken = async () => {\n    if (!refreshToken) return;\n    try {\n      const data = await authService.refreshToken(refreshToken);\n      const newAccessToken = data.token || data.accessToken;\n      setToken(newAccessToken);\n      localStorage.setItem('token', newAccessToken);\n    } catch (error) {\n      console.error(\"Ошибка при обновлении токена:\", error);\n      logout();\n    }\n  };\n  const logout = () => {\n    setToken(null);\n    setRefreshToken(null);\n    setUser(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('user');\n    navigate('/login');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      refreshToken,\n      login,\n      register,\n      logout,\n      refreshAccessToken\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"UwW3ekfK0l6vLUXKoA/CcE3C5Lw=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useNavigate","authService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","navigate","user","setUser","token","setToken","localStorage","getItem","refreshToken","setRefreshToken","storedUser","JSON","parse","error","console","logout","setAuthData","accessToken","userData","setItem","stringify","login","email","password","adminUser","id","username","role","data","userId","register","refreshAccessToken","newAccessToken","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Project/front/chord-site/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport authService from '../services/authService';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const navigate = useNavigate();\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\r\n  const [refreshToken, setRefreshToken] = useState(localStorage.getItem('refreshToken') || null);\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      try {\r\n        const storedUser = localStorage.getItem('user');\r\n        if (storedUser) {\r\n          setUser(JSON.parse(storedUser));\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Ошибка при загрузке пользователя из localStorage:\", error);\r\n        logout();\r\n      }\r\n    }\r\n  }, [token]);\r\n\r\n  const setAuthData = (accessToken, refreshToken, userData) => {\r\n    setToken(accessToken);\r\n    setRefreshToken(refreshToken);\r\n    setUser(userData);\r\n\r\n    localStorage.setItem('token', accessToken);\r\n    localStorage.setItem('refreshToken', refreshToken);\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n  };\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      if (email === 'admin' && password === 'admin') {\r\n        const adminUser = { id: 1, email, username: 'Administrator', role: 'Admin' };\r\n        setAuthData('fake-admin-token', 'fake-refresh-token', adminUser);\r\n        navigate('/profile');\r\n        return;\r\n      }\r\n\r\n      const data = await authService.login(email, password);\r\n      const userData = {\r\n        id: data.userId || 0,\r\n        email: email,\r\n        username: data.username || email,\r\n        role: data.role || 'User',\r\n      };\r\n\r\n      setAuthData(data.token || data.accessToken, data.refreshToken, userData);\r\n      navigate('/profile');\r\n    } catch (error) {\r\n      console.error(\"Ошибка при входе:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (username, email, password) => {\r\n    try {\r\n      const data = await authService.register(username, email, password);\r\n      const userData = {\r\n        id: data.userId || 0,\r\n        email,\r\n        username,\r\n        role: data.role || 'User',\r\n      };\r\n\r\n      setAuthData(data.token || data.accessToken, data.refreshToken, userData);\r\n      navigate('/profile');\r\n    } catch (error) {\r\n      console.error(\"Ошибка при регистрации:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const refreshAccessToken = async () => {\r\n    if (!refreshToken) return;\r\n\r\n    try {\r\n      const data = await authService.refreshToken(refreshToken);\r\n      const newAccessToken = data.token || data.accessToken;\r\n      setToken(newAccessToken);\r\n      localStorage.setItem('token', newAccessToken);\r\n    } catch (error) {\r\n      console.error(\"Ошибка при обновлении токена:\", error);\r\n      logout();\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setToken(null);\r\n    setRefreshToken(null);\r\n    setUser(null);\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('refreshToken');\r\n    localStorage.removeItem('user');\r\n    navigate('/login');\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ user, token, refreshToken, login, register, logout, refreshAccessToken }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}