{"ast":null,"code":"\"use strict\";\n\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LongPollingTransport = void 0;\nconst AbortController_1 = require(\"./AbortController\");\nconst Errors_1 = require(\"./Errors\");\nconst ILogger_1 = require(\"./ILogger\");\nconst ITransport_1 = require(\"./ITransport\");\nconst Utils_1 = require(\"./Utils\");\n// Not exported from 'index', this type is internal.\n/** @private */\nclass LongPollingTransport {\n  // This is an internal type, not exported from 'index' so this is really just internal.\n  get pollAborted() {\n    return this._pollAbort.aborted;\n  }\n  constructor(httpClient, logger, options) {\n    this._httpClient = httpClient;\n    this._logger = logger;\n    this._pollAbort = new AbortController_1.AbortController();\n    this._options = options;\n    this._running = false;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n  async connect(url, transferFormat) {\n    Utils_1.Arg.isRequired(url, \"url\");\n    Utils_1.Arg.isRequired(transferFormat, \"transferFormat\");\n    Utils_1.Arg.isIn(transferFormat, ITransport_1.TransferFormat, \"transferFormat\");\n    this._url = url;\n    this._logger.log(ILogger_1.LogLevel.Trace, \"(LongPolling transport) Connecting.\");\n    // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\n    if (transferFormat === ITransport_1.TransferFormat.Binary && typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\") {\n      throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\n    }\n    const [name, value] = (0, Utils_1.getUserAgentHeader)();\n    const headers = {\n      [name]: value,\n      ...this._options.headers\n    };\n    const pollOptions = {\n      abortSignal: this._pollAbort.signal,\n      headers,\n      timeout: 100000,\n      withCredentials: this._options.withCredentials\n    };\n    if (transferFormat === ITransport_1.TransferFormat.Binary) {\n      pollOptions.responseType = \"arraybuffer\";\n    }\n    // Make initial long polling request\n    // Server uses first long polling request to finish initializing connection and it returns without data\n    const pollUrl = `${url}&_=${Date.now()}`;\n    this._logger.log(ILogger_1.LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\n    const response = await this._httpClient.get(pollUrl, pollOptions);\n    if (response.statusCode !== 200) {\n      this._logger.log(ILogger_1.LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\n      // Mark running as false so that the poll immediately ends and runs the close logic\n      this._closeError = new Errors_1.HttpError(response.statusText || \"\", response.statusCode);\n      this._running = false;\n    } else {\n      this._running = true;\n    }\n    this._receiving = this._poll(this._url, pollOptions);\n  }\n  async _poll(url, pollOptions) {\n    try {\n      while (this._running) {\n        try {\n          const pollUrl = `${url}&_=${Date.now()}`;\n          this._logger.log(ILogger_1.LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\n          const response = await this._httpClient.get(pollUrl, pollOptions);\n          if (response.statusCode === 204) {\n            this._logger.log(ILogger_1.LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\n            this._running = false;\n          } else if (response.statusCode !== 200) {\n            this._logger.log(ILogger_1.LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\n            // Unexpected status code\n            this._closeError = new Errors_1.HttpError(response.statusText || \"\", response.statusCode);\n            this._running = false;\n          } else {\n            // Process the response\n            if (response.content) {\n              this._logger.log(ILogger_1.LogLevel.Trace, `(LongPolling transport) data received. ${(0, Utils_1.getDataDetail)(response.content, this._options.logMessageContent)}.`);\n              if (this.onreceive) {\n                this.onreceive(response.content);\n              }\n            } else {\n              // This is another way timeout manifest.\n              this._logger.log(ILogger_1.LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n            }\n          }\n        } catch (e) {\n          if (!this._running) {\n            // Log but disregard errors that occur after stopping\n            this._logger.log(ILogger_1.LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\n          } else {\n            if (e instanceof Errors_1.TimeoutError) {\n              // Ignore timeouts and reissue the poll.\n              this._logger.log(ILogger_1.LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n            } else {\n              // Close the connection with the error as the result.\n              this._closeError = e;\n              this._running = false;\n            }\n          }\n        }\n      }\n    } finally {\n      this._logger.log(ILogger_1.LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\n      // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\n      // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\n      if (!this.pollAborted) {\n        this._raiseOnClose();\n      }\n    }\n  }\n  async send(data) {\n    if (!this._running) {\n      return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\n    }\n    return (0, Utils_1.sendMessage)(this._logger, \"LongPolling\", this._httpClient, this._url, data, this._options);\n  }\n  async stop() {\n    this._logger.log(ILogger_1.LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\n    // Tell receiving loop to stop, abort any current request, and then wait for it to finish\n    this._running = false;\n    this._pollAbort.abort();\n    try {\n      await this._receiving;\n      // Send DELETE to clean up long polling on the server\n      this._logger.log(ILogger_1.LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\n      const headers = {};\n      const [name, value] = (0, Utils_1.getUserAgentHeader)();\n      headers[name] = value;\n      const deleteOptions = {\n        headers: {\n          ...headers,\n          ...this._options.headers\n        },\n        timeout: this._options.timeout,\n        withCredentials: this._options.withCredentials\n      };\n      let error;\n      try {\n        await this._httpClient.delete(this._url, deleteOptions);\n      } catch (err) {\n        error = err;\n      }\n      if (error) {\n        if (error instanceof Errors_1.HttpError) {\n          if (error.statusCode === 404) {\n            this._logger.log(ILogger_1.LogLevel.Trace, \"(LongPolling transport) A 404 response was returned from sending a DELETE request.\");\n          } else {\n            this._logger.log(ILogger_1.LogLevel.Trace, `(LongPolling transport) Error sending a DELETE request: ${error}`);\n          }\n        }\n      } else {\n        this._logger.log(ILogger_1.LogLevel.Trace, \"(LongPolling transport) DELETE request accepted.\");\n      }\n    } finally {\n      this._logger.log(ILogger_1.LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\n      // Raise close event here instead of in polling\n      // It needs to happen after the DELETE request is sent\n      this._raiseOnClose();\n    }\n  }\n  _raiseOnClose() {\n    if (this.onclose) {\n      let logMessage = \"(LongPolling transport) Firing onclose event.\";\n      if (this._closeError) {\n        logMessage += \" Error: \" + this._closeError;\n      }\n      this._logger.log(ILogger_1.LogLevel.Trace, logMessage);\n      this.onclose(this._closeError);\n    }\n  }\n}\nexports.LongPollingTransport = LongPollingTransport;","map":{"version":3,"names":["AbortController_1","require","Errors_1","ILogger_1","ITransport_1","Utils_1","LongPollingTransport","pollAborted","_pollAbort","aborted","constructor","httpClient","logger","options","_httpClient","_logger","AbortController","_options","_running","onreceive","onclose","connect","url","transferFormat","Arg","isRequired","isIn","TransferFormat","_url","log","LogLevel","Trace","Binary","XMLHttpRequest","responseType","Error","name","value","getUserAgentHeader","headers","pollOptions","abortSignal","signal","timeout","withCredentials","pollUrl","Date","now","response","get","statusCode","_closeError","HttpError","statusText","_receiving","_poll","Information","content","getDataDetail","logMessageContent","e","message","TimeoutError","_raiseOnClose","send","data","Promise","reject","sendMessage","stop","abort","deleteOptions","error","delete","err","logMessage","exports"],"sources":["M:\\chord-site\\node_modules\\@microsoft\\signalr\\src\\LongPollingTransport.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    private readonly _pollAbort: AbortController;\r\n\r\n    private _url?: string;\r\n    private _running: boolean;\r\n    private _receiving?: Promise<void>;\r\n    private _closeError?: Error | unknown;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error | unknown) => void) | null;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted(): boolean {\r\n        return this._pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, logger: ILogger, options: IHttpConnectionOptions) {\r\n        this._httpClient = httpClient;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController();\r\n        this._options = options;\r\n\r\n        this._running = false;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._url = url;\r\n\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._options.headers };\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._options.withCredentials,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        } else {\r\n            this._running = true;\r\n        }\r\n\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n\r\n    private async _poll(url: string, pollOptions: HttpRequest): Promise<void> {\r\n        try {\r\n            while (this._running) {\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n\r\n                        this._running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n                        // Unexpected status code\r\n                        this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent!)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${(e as any).message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url!, data, this._options);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n\r\n        try {\r\n            await this._receiving;\r\n\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n\r\n            const headers: {[k: string]: string} = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            };\r\n\r\n            let error;\r\n            try {\r\n                await this._httpClient.delete(this._url!, deleteOptions);\r\n            } catch (err) {\r\n                error = err;\r\n            }\r\n\r\n            if (error) {\r\n                if (error instanceof HttpError) {\r\n                    if (error.statusCode === 404) {\r\n                        this._logger.log(LogLevel.Trace, \"(LongPolling transport) A 404 response was returned from sending a DELETE request.\");\r\n                    } else {\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Error sending a DELETE request: ${error}`);\r\n                    }\r\n                }\r\n            } else {\r\n                this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request accepted.\");\r\n            }\r\n\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n\r\n    private _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\n"],"mappings":";;AAAA;AACA;;;;;AAEA,MAAAA,iBAAA,GAAAC,OAAA;AACA,MAAAC,QAAA,GAAAD,OAAA;AAEA,MAAAE,SAAA,GAAAF,OAAA;AACA,MAAAG,YAAA,GAAAH,OAAA;AACA,MAAAI,OAAA,GAAAJ,OAAA;AAGA;AACA;AACA,MAAaK,oBAAoB;EAc7B;EACA,IAAWC,WAAWA,CAAA;IAClB,OAAO,IAAI,CAACC,UAAU,CAACC,OAAO;EAClC;EAEAC,YAAYC,UAAsB,EAAEC,MAAe,EAAEC,OAA+B;IAChF,IAAI,CAACC,WAAW,GAAGH,UAAU;IAC7B,IAAI,CAACI,OAAO,GAAGH,MAAM;IACrB,IAAI,CAACJ,UAAU,GAAG,IAAIR,iBAAA,CAAAgB,eAAe,EAAE;IACvC,IAAI,CAACC,QAAQ,GAAGJ,OAAO;IAEvB,IAAI,CAACK,QAAQ,GAAG,KAAK;IAErB,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,OAAO,GAAG,IAAI;EACvB;EAEO,MAAMC,OAAOA,CAACC,GAAW,EAAEC,cAA8B;IAC5DlB,OAAA,CAAAmB,GAAG,CAACC,UAAU,CAACH,GAAG,EAAE,KAAK,CAAC;IAC1BjB,OAAA,CAAAmB,GAAG,CAACC,UAAU,CAACF,cAAc,EAAE,gBAAgB,CAAC;IAChDlB,OAAA,CAAAmB,GAAG,CAACE,IAAI,CAACH,cAAc,EAAEnB,YAAA,CAAAuB,cAAc,EAAE,gBAAgB,CAAC;IAE1D,IAAI,CAACC,IAAI,GAAGN,GAAG;IAEf,IAAI,CAACP,OAAO,CAACc,GAAG,CAAC1B,SAAA,CAAA2B,QAAQ,CAACC,KAAK,EAAE,qCAAqC,CAAC;IAEvE;IACA,IAAIR,cAAc,KAAKnB,YAAA,CAAAuB,cAAc,CAACK,MAAM,IACvC,OAAOC,cAAc,KAAK,WAAW,IAAI,OAAO,IAAIA,cAAc,EAAE,CAACC,YAAY,KAAK,QAAS,EAAE;MAClG,MAAM,IAAIC,KAAK,CAAC,4FAA4F,CAAC;;IAGjH,MAAM,CAACC,IAAI,EAAEC,KAAK,CAAC,GAAG,IAAAhC,OAAA,CAAAiC,kBAAkB,GAAE;IAC1C,MAAMC,OAAO,GAAG;MAAE,CAACH,IAAI,GAAGC,KAAK;MAAE,GAAG,IAAI,CAACpB,QAAQ,CAACsB;IAAO,CAAE;IAE3D,MAAMC,WAAW,GAAgB;MAC7BC,WAAW,EAAE,IAAI,CAACjC,UAAU,CAACkC,MAAM;MACnCH,OAAO;MACPI,OAAO,EAAE,MAAM;MACfC,eAAe,EAAE,IAAI,CAAC3B,QAAQ,CAAC2B;KAClC;IAED,IAAIrB,cAAc,KAAKnB,YAAA,CAAAuB,cAAc,CAACK,MAAM,EAAE;MAC1CQ,WAAW,CAACN,YAAY,GAAG,aAAa;;IAG5C;IACA;IACA,MAAMW,OAAO,GAAG,GAAGvB,GAAG,MAAMwB,IAAI,CAACC,GAAG,EAAE,EAAE;IACxC,IAAI,CAAChC,OAAO,CAACc,GAAG,CAAC1B,SAAA,CAAA2B,QAAQ,CAACC,KAAK,EAAE,oCAAoCc,OAAO,GAAG,CAAC;IAChF,MAAMG,QAAQ,GAAG,MAAM,IAAI,CAAClC,WAAW,CAACmC,GAAG,CAACJ,OAAO,EAAEL,WAAW,CAAC;IACjE,IAAIQ,QAAQ,CAACE,UAAU,KAAK,GAAG,EAAE;MAC7B,IAAI,CAACnC,OAAO,CAACc,GAAG,CAAC1B,SAAA,CAAA2B,QAAQ,CAACK,KAAK,EAAE,qDAAqDa,QAAQ,CAACE,UAAU,GAAG,CAAC;MAE7G;MACA,IAAI,CAACC,WAAW,GAAG,IAAIjD,QAAA,CAAAkD,SAAS,CAACJ,QAAQ,CAACK,UAAU,IAAI,EAAE,EAAEL,QAAQ,CAACE,UAAU,CAAC;MAChF,IAAI,CAAChC,QAAQ,GAAG,KAAK;KACxB,MAAM;MACH,IAAI,CAACA,QAAQ,GAAG,IAAI;;IAGxB,IAAI,CAACoC,UAAU,GAAG,IAAI,CAACC,KAAK,CAAC,IAAI,CAAC3B,IAAI,EAAEY,WAAW,CAAC;EACxD;EAEQ,MAAMe,KAAKA,CAACjC,GAAW,EAAEkB,WAAwB;IACrD,IAAI;MACA,OAAO,IAAI,CAACtB,QAAQ,EAAE;QAClB,IAAI;UACA,MAAM2B,OAAO,GAAG,GAAGvB,GAAG,MAAMwB,IAAI,CAACC,GAAG,EAAE,EAAE;UACxC,IAAI,CAAChC,OAAO,CAACc,GAAG,CAAC1B,SAAA,CAAA2B,QAAQ,CAACC,KAAK,EAAE,oCAAoCc,OAAO,GAAG,CAAC;UAChF,MAAMG,QAAQ,GAAG,MAAM,IAAI,CAAClC,WAAW,CAACmC,GAAG,CAACJ,OAAO,EAAEL,WAAW,CAAC;UAEjE,IAAIQ,QAAQ,CAACE,UAAU,KAAK,GAAG,EAAE;YAC7B,IAAI,CAACnC,OAAO,CAACc,GAAG,CAAC1B,SAAA,CAAA2B,QAAQ,CAAC0B,WAAW,EAAE,oDAAoD,CAAC;YAE5F,IAAI,CAACtC,QAAQ,GAAG,KAAK;WACxB,MAAM,IAAI8B,QAAQ,CAACE,UAAU,KAAK,GAAG,EAAE;YACpC,IAAI,CAACnC,OAAO,CAACc,GAAG,CAAC1B,SAAA,CAAA2B,QAAQ,CAACK,KAAK,EAAE,qDAAqDa,QAAQ,CAACE,UAAU,GAAG,CAAC;YAE7G;YACA,IAAI,CAACC,WAAW,GAAG,IAAIjD,QAAA,CAAAkD,SAAS,CAACJ,QAAQ,CAACK,UAAU,IAAI,EAAE,EAAEL,QAAQ,CAACE,UAAU,CAAC;YAChF,IAAI,CAAChC,QAAQ,GAAG,KAAK;WACxB,MAAM;YACH;YACA,IAAI8B,QAAQ,CAACS,OAAO,EAAE;cAClB,IAAI,CAAC1C,OAAO,CAACc,GAAG,CAAC1B,SAAA,CAAA2B,QAAQ,CAACC,KAAK,EAAE,0CAA0C,IAAA1B,OAAA,CAAAqD,aAAa,EAACV,QAAQ,CAACS,OAAO,EAAE,IAAI,CAACxC,QAAQ,CAAC0C,iBAAkB,CAAC,GAAG,CAAC;cAChJ,IAAI,IAAI,CAACxC,SAAS,EAAE;gBAChB,IAAI,CAACA,SAAS,CAAC6B,QAAQ,CAACS,OAAO,CAAC;;aAEvC,MAAM;cACH;cACA,IAAI,CAAC1C,OAAO,CAACc,GAAG,CAAC1B,SAAA,CAAA2B,QAAQ,CAACC,KAAK,EAAE,oDAAoD,CAAC;;;SAGjG,CAAC,OAAO6B,CAAC,EAAE;UACR,IAAI,CAAC,IAAI,CAAC1C,QAAQ,EAAE;YAChB;YACA,IAAI,CAACH,OAAO,CAACc,GAAG,CAAC1B,SAAA,CAAA2B,QAAQ,CAACC,KAAK,EAAE,wDAAyD6B,CAAS,CAACC,OAAO,EAAE,CAAC;WACjH,MAAM;YACH,IAAID,CAAC,YAAY1D,QAAA,CAAA4D,YAAY,EAAE;cAC3B;cACA,IAAI,CAAC/C,OAAO,CAACc,GAAG,CAAC1B,SAAA,CAAA2B,QAAQ,CAACC,KAAK,EAAE,oDAAoD,CAAC;aACzF,MAAM;cACH;cACA,IAAI,CAACoB,WAAW,GAAGS,CAAC;cACpB,IAAI,CAAC1C,QAAQ,GAAG,KAAK;;;;;KAKxC,SAAS;MACN,IAAI,CAACH,OAAO,CAACc,GAAG,CAAC1B,SAAA,CAAA2B,QAAQ,CAACC,KAAK,EAAE,2CAA2C,CAAC;MAE7E;MACA;MACA,IAAI,CAAC,IAAI,CAACxB,WAAW,EAAE;QACnB,IAAI,CAACwD,aAAa,EAAE;;;EAGhC;EAEO,MAAMC,IAAIA,CAACC,IAAS;IACvB,IAAI,CAAC,IAAI,CAAC/C,QAAQ,EAAE;MAChB,OAAOgD,OAAO,CAACC,MAAM,CAAC,IAAIhC,KAAK,CAAC,8CAA8C,CAAC,CAAC;;IAEpF,OAAO,IAAA9B,OAAA,CAAA+D,WAAW,EAAC,IAAI,CAACrD,OAAO,EAAE,aAAa,EAAE,IAAI,CAACD,WAAW,EAAE,IAAI,CAACc,IAAK,EAAEqC,IAAI,EAAE,IAAI,CAAChD,QAAQ,CAAC;EACtG;EAEO,MAAMoD,IAAIA,CAAA;IACb,IAAI,CAACtD,OAAO,CAACc,GAAG,CAAC1B,SAAA,CAAA2B,QAAQ,CAACC,KAAK,EAAE,2CAA2C,CAAC;IAE7E;IACA,IAAI,CAACb,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACV,UAAU,CAAC8D,KAAK,EAAE;IAEvB,IAAI;MACA,MAAM,IAAI,CAAChB,UAAU;MAErB;MACA,IAAI,CAACvC,OAAO,CAACc,GAAG,CAAC1B,SAAA,CAAA2B,QAAQ,CAACC,KAAK,EAAE,qDAAqD,IAAI,CAACH,IAAI,GAAG,CAAC;MAEnG,MAAMW,OAAO,GAA0B,EAAE;MACzC,MAAM,CAACH,IAAI,EAAEC,KAAK,CAAC,GAAG,IAAAhC,OAAA,CAAAiC,kBAAkB,GAAE;MAC1CC,OAAO,CAACH,IAAI,CAAC,GAAGC,KAAK;MAErB,MAAMkC,aAAa,GAAgB;QAC/BhC,OAAO,EAAE;UAAE,GAAGA,OAAO;UAAE,GAAG,IAAI,CAACtB,QAAQ,CAACsB;QAAO,CAAE;QACjDI,OAAO,EAAE,IAAI,CAAC1B,QAAQ,CAAC0B,OAAO;QAC9BC,eAAe,EAAE,IAAI,CAAC3B,QAAQ,CAAC2B;OAClC;MAED,IAAI4B,KAAK;MACT,IAAI;QACA,MAAM,IAAI,CAAC1D,WAAW,CAAC2D,MAAM,CAAC,IAAI,CAAC7C,IAAK,EAAE2C,aAAa,CAAC;OAC3D,CAAC,OAAOG,GAAG,EAAE;QACVF,KAAK,GAAGE,GAAG;;MAGf,IAAIF,KAAK,EAAE;QACP,IAAIA,KAAK,YAAYtE,QAAA,CAAAkD,SAAS,EAAE;UAC5B,IAAIoB,KAAK,CAACtB,UAAU,KAAK,GAAG,EAAE;YAC1B,IAAI,CAACnC,OAAO,CAACc,GAAG,CAAC1B,SAAA,CAAA2B,QAAQ,CAACC,KAAK,EAAE,oFAAoF,CAAC;WACzH,MAAM;YACH,IAAI,CAAChB,OAAO,CAACc,GAAG,CAAC1B,SAAA,CAAA2B,QAAQ,CAACC,KAAK,EAAE,2DAA2DyC,KAAK,EAAE,CAAC;;;OAG/G,MAAM;QACH,IAAI,CAACzD,OAAO,CAACc,GAAG,CAAC1B,SAAA,CAAA2B,QAAQ,CAACC,KAAK,EAAE,kDAAkD,CAAC;;KAG3F,SAAS;MACN,IAAI,CAAChB,OAAO,CAACc,GAAG,CAAC1B,SAAA,CAAA2B,QAAQ,CAACC,KAAK,EAAE,wCAAwC,CAAC;MAE1E;MACA;MACA,IAAI,CAACgC,aAAa,EAAE;;EAE5B;EAEQA,aAAaA,CAAA;IACjB,IAAI,IAAI,CAAC3C,OAAO,EAAE;MACd,IAAIuD,UAAU,GAAG,+CAA+C;MAChE,IAAI,IAAI,CAACxB,WAAW,EAAE;QAClBwB,UAAU,IAAI,UAAU,GAAG,IAAI,CAACxB,WAAW;;MAE/C,IAAI,CAACpC,OAAO,CAACc,GAAG,CAAC1B,SAAA,CAAA2B,QAAQ,CAACC,KAAK,EAAE4C,UAAU,CAAC;MAC5C,IAAI,CAACvD,OAAO,CAAC,IAAI,CAAC+B,WAAW,CAAC;;EAEtC;;AA1MJyB,OAAA,CAAAtE,oBAAA,GAAAA,oBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}