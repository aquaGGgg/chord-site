{"ast":null,"code":"import api from'./api';const authService={login:async(email,password)=>{const response=await api.post('/auth/login',{email,password});const{accessToken,refreshToken}=response.data;localStorage.setItem('token',accessToken);localStorage.setItem('refreshToken',refreshToken);return response.data;},register:async(username,email,password)=>{const response=await api.post('/auth/register',{userName:username,email,password});const{accessToken,refreshToken}=response.data;localStorage.setItem('token',accessToken);localStorage.setItem('refreshToken',refreshToken);return response.data;},refreshToken:async()=>{const refreshToken=localStorage.getItem('refreshToken');if(!refreshToken)throw new Error('No refresh token found');const response=await api.post('/auth/refresh-token',{refreshToken});const{accessToken,refreshToken:newRefreshToken}=response.data;localStorage.setItem('token',accessToken);localStorage.setItem('refreshToken',newRefreshToken);return accessToken;}};export default authService;","map":{"version":3,"names":["api","authService","login","email","password","response","post","accessToken","refreshToken","data","localStorage","setItem","register","username","userName","getItem","Error","newRefreshToken"],"sources":["E:/Project/front/chord-site/src/services/authService.js"],"sourcesContent":["import api from './api';\r\n\r\nconst authService = {\r\n  login: async (email, password) => {\r\n    const response = await api.post('/auth/login', { email, password });\r\n    const { accessToken, refreshToken } = response.data;\r\n    localStorage.setItem('token', accessToken);\r\n    localStorage.setItem('refreshToken', refreshToken);\r\n    return response.data;\r\n  },\r\n\r\n  register: async (username, email, password) => {\r\n    const response = await api.post('/auth/register', { userName: username, email, password });\r\n    const { accessToken, refreshToken } = response.data;\r\n    localStorage.setItem('token', accessToken);\r\n    localStorage.setItem('refreshToken', refreshToken);\r\n    return response.data;\r\n  },\r\n\r\n  refreshToken: async () => {\r\n    const refreshToken = localStorage.getItem('refreshToken');\r\n    if (!refreshToken) throw new Error('No refresh token found');\r\n\r\n    const response = await api.post('/auth/refresh-token', { refreshToken });\r\n    const { accessToken, refreshToken: newRefreshToken } = response.data;\r\n\r\n    localStorage.setItem('token', accessToken);\r\n    localStorage.setItem('refreshToken', newRefreshToken);\r\n    return accessToken;\r\n  }\r\n};\r\n\r\nexport default authService;\r\n"],"mappings":"AAAA,MAAO,CAAAA,GAAG,KAAM,OAAO,CAEvB,KAAM,CAAAC,WAAW,CAAG,CAClBC,KAAK,CAAE,KAAAA,CAAOC,KAAK,CAAEC,QAAQ,GAAK,CAChC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAL,GAAG,CAACM,IAAI,CAAC,aAAa,CAAE,CAAEH,KAAK,CAAEC,QAAS,CAAC,CAAC,CACnE,KAAM,CAAEG,WAAW,CAAEC,YAAa,CAAC,CAAGH,QAAQ,CAACI,IAAI,CACnDC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAEJ,WAAW,CAAC,CAC1CG,YAAY,CAACC,OAAO,CAAC,cAAc,CAAEH,YAAY,CAAC,CAClD,MAAO,CAAAH,QAAQ,CAACI,IAAI,CACtB,CAAC,CAEDG,QAAQ,CAAE,KAAAA,CAAOC,QAAQ,CAAEV,KAAK,CAAEC,QAAQ,GAAK,CAC7C,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAL,GAAG,CAACM,IAAI,CAAC,gBAAgB,CAAE,CAAEQ,QAAQ,CAAED,QAAQ,CAAEV,KAAK,CAAEC,QAAS,CAAC,CAAC,CAC1F,KAAM,CAAEG,WAAW,CAAEC,YAAa,CAAC,CAAGH,QAAQ,CAACI,IAAI,CACnDC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAEJ,WAAW,CAAC,CAC1CG,YAAY,CAACC,OAAO,CAAC,cAAc,CAAEH,YAAY,CAAC,CAClD,MAAO,CAAAH,QAAQ,CAACI,IAAI,CACtB,CAAC,CAEDD,YAAY,CAAE,KAAAA,CAAA,GAAY,CACxB,KAAM,CAAAA,YAAY,CAAGE,YAAY,CAACK,OAAO,CAAC,cAAc,CAAC,CACzD,GAAI,CAACP,YAAY,CAAE,KAAM,IAAI,CAAAQ,KAAK,CAAC,wBAAwB,CAAC,CAE5D,KAAM,CAAAX,QAAQ,CAAG,KAAM,CAAAL,GAAG,CAACM,IAAI,CAAC,qBAAqB,CAAE,CAAEE,YAAa,CAAC,CAAC,CACxE,KAAM,CAAED,WAAW,CAAEC,YAAY,CAAES,eAAgB,CAAC,CAAGZ,QAAQ,CAACI,IAAI,CAEpEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAEJ,WAAW,CAAC,CAC1CG,YAAY,CAACC,OAAO,CAAC,cAAc,CAAEM,eAAe,CAAC,CACrD,MAAO,CAAAV,WAAW,CACpB,CACF,CAAC,CAED,cAAe,CAAAN,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}