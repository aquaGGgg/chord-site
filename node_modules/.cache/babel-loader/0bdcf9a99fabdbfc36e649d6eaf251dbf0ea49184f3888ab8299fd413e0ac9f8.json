{"ast":null,"code":"import axios from'axios';import authService from'./authService';const api=axios.create({baseURL:'https://a34433-cd5b.k.d-f.pw/api'});// Добавляем access token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>Promise.reject(error));// Interceptor для обработки 401 и автоматического обновления access token\napi.interceptors.response.use(response=>response,async error=>{var _error$response;const originalRequest=error.config;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401&&!originalRequest._retry){originalRequest._retry=true;try{const newAccessToken=await authService.refreshToken();originalRequest.headers.Authorization=`Bearer ${newAccessToken}`;return api(originalRequest);// повторяем оригинальный запрос\n}catch(refreshError){localStorage.removeItem('token');localStorage.removeItem('refreshToken');window.location.href='/login';// перенаправляем на логин\nreturn Promise.reject(refreshError);}}return Promise.reject(error);});export default api;","map":{"version":3,"names":["axios","authService","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","_error$response","originalRequest","status","_retry","newAccessToken","refreshToken","refreshError","removeItem","window","location","href"],"sources":["E:/Project/front/chord-site/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport authService from './authService';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'https://a34433-cd5b.k.d-f.pw/api',\r\n});\r\n\r\n// Добавляем access token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Interceptor для обработки 401 и автоматического обновления access token\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      try {\r\n        const newAccessToken = await authService.refreshToken();\r\n        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\r\n        return api(originalRequest); // повторяем оригинальный запрос\r\n      } catch (refreshError) {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('refreshToken');\r\n        window.location.href = '/login'; // перенаправляем на логин\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,WAAW,KAAM,eAAe,CAEvC,KAAM,CAAAC,GAAG,CAAGF,KAAK,CAACG,MAAM,CAAC,CACvBC,OAAO,CAAE,kCACX,CAAC,CAAC,CAEF;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,EAAK,CACV,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAC3C,GAAIF,KAAK,CAAE,CACTD,MAAM,CAACI,OAAO,CAACC,aAAa,CAAG,UAAUJ,KAAK,EAAE,CAClD,CACA,MAAO,CAAAD,MAAM,CACf,CAAC,CACAM,KAAK,EAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC,CAED;AACAZ,GAAG,CAACG,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC1BU,QAAQ,EAAKA,QAAQ,CACtB,KAAO,CAAAH,KAAK,EAAK,KAAAI,eAAA,CACf,KAAM,CAAAC,eAAe,CAAGL,KAAK,CAACN,MAAM,CAEpC,GAAI,EAAAU,eAAA,CAAAJ,KAAK,CAACG,QAAQ,UAAAC,eAAA,iBAAdA,eAAA,CAAgBE,MAAM,IAAK,GAAG,EAAI,CAACD,eAAe,CAACE,MAAM,CAAE,CAC7DF,eAAe,CAACE,MAAM,CAAG,IAAI,CAC7B,GAAI,CACF,KAAM,CAAAC,cAAc,CAAG,KAAM,CAAArB,WAAW,CAACsB,YAAY,CAAC,CAAC,CACvDJ,eAAe,CAACP,OAAO,CAACC,aAAa,CAAG,UAAUS,cAAc,EAAE,CAClE,MAAO,CAAApB,GAAG,CAACiB,eAAe,CAAC,CAAE;AAC/B,CAAE,MAAOK,YAAY,CAAE,CACrBd,YAAY,CAACe,UAAU,CAAC,OAAO,CAAC,CAChCf,YAAY,CAACe,UAAU,CAAC,cAAc,CAAC,CACvCC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,QAAQ,CAAE;AACjC,MAAO,CAAAb,OAAO,CAACC,MAAM,CAACQ,YAAY,CAAC,CACrC,CACF,CAEA,MAAO,CAAAT,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CAAC,CAED,cAAe,CAAAZ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}