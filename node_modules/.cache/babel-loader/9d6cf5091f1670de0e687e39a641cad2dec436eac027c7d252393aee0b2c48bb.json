{"ast":null,"code":"import api from './api';\nconst songsService = {\n  // Получение списка авторов\n  getAuthors: async () => {\n    try {\n      const response = await api.get('/songs/authors');\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message || error;\n    }\n  },\n  // Получение песен по автору\n  getSongsByAuthor: async author => {\n    try {\n      const response = await api.get('/songs');\n      const allSongs = response.data;\n      const filteredSongs = allSongs.filter(song => song.author === author);\n      return filteredSongs;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message || error;\n    }\n  },\n  // Получение деталей песни\n  getSong: async songId => {\n    try {\n      const response = await api.get(`/songs/${songId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message || error;\n    }\n  },\n  // Добавление в избранное по email (новый метод)\n  addFavoriteByEmail: async (email, songId) => {\n    try {\n      const response = await api.post('/favorites/by-email', {\n        email,\n        songId\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message || error;\n    }\n  },\n  // Удаление из избранного\n  removeFavorite: async (userId, songId) => {\n    try {\n      const response = await api.delete(`/users/${userId}/favorites/${songId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message || error;\n    }\n  },\n  // Получение избранных песен\n  getFavorites: async userId => {\n    try {\n      const response = await api.get(`/users/${userId}/favorites`);\n      return response.data;\n    } catch (error) {\n      var _error$response6;\n      throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message || error;\n    }\n  }\n};\nexport default songsService;","map":{"version":3,"names":["api","songsService","getAuthors","response","get","data","error","_error$response","message","getSongsByAuthor","author","allSongs","filteredSongs","filter","song","_error$response2","getSong","songId","_error$response3","addFavoriteByEmail","email","post","_error$response4","removeFavorite","userId","delete","_error$response5","getFavorites","_error$response6"],"sources":["M:/chord-site/src/services/songsService.js"],"sourcesContent":["import api from './api';\r\n\r\nconst songsService = {\r\n  // Получение списка авторов\r\n  getAuthors: async () => {\r\n    try {\r\n      const response = await api.get('/songs/authors');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message || error;\r\n    }\r\n  },\r\n\r\n  // Получение песен по автору\r\n  getSongsByAuthor: async (author) => {\r\n    try {\r\n      const response = await api.get('/songs');\r\n      const allSongs = response.data;\r\n      const filteredSongs = allSongs.filter(song => song.author === author);\r\n      return filteredSongs;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message || error;\r\n    }\r\n  },\r\n\r\n  // Получение деталей песни\r\n  getSong: async (songId) => {\r\n    try {\r\n      const response = await api.get(`/songs/${songId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message || error;\r\n    }\r\n  },\r\n\r\n  // Добавление в избранное по email (новый метод)\r\n  addFavoriteByEmail: async (email, songId) => {\r\n    try {\r\n      const response = await api.post('/favorites/by-email', { email, songId });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message || error;\r\n    }\r\n  },\r\n\r\n  // Удаление из избранного\r\n  removeFavorite: async (userId, songId) => {\r\n    try {\r\n      const response = await api.delete(\r\n        `/users/${userId}/favorites/${songId}`\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message || error;\r\n    }\r\n  },\r\n\r\n  // Получение избранных песен\r\n  getFavorites: async (userId) => {\r\n    try {\r\n      const response = await api.get(`/users/${userId}/favorites`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message || error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default songsService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}