{"ast":null,"code":"import api from'./api';const songsService={// Получение списка авторов (каждый автор — строка)\ngetAuthors:async()=>{try{const response=await api.get('/songs/authors');return response.data;}catch(error){var _error$response;throw((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data)||error.message||error;}},// Получение песен по выбранному автору\ngetSongsByAuthor:async author=>{try{const response=await api.get('/songs');const allSongs=response.data;const filteredSongs=allSongs.filter(song=>song.author===author);return filteredSongs;}catch(error){var _error$response2;throw((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data)||error.message||error;}},// Получение деталей песни\ngetSong:async songId=>{try{const response=await api.get(`/songs/${songId}`);return response.data;}catch(error){var _error$response3;throw((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.data)||error.message||error;}},// Добавление песни в избранное\naddFavorite:async songId=>{try{const response=await api.post(`/favorites/add/${songId}`);return response.data;}catch(error){var _error$response4;throw((_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.data)||error.message||error;}},// Удаление песни из избранного\nremoveFavorite:async songId=>{try{const response=await api.delete(`/favorites/remove/${songId}`);return response.data;}catch(error){var _error$response5;throw((_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.data)||error.message||error;}},// Получение избранных песен пользователя\ngetFavorites:async()=>{try{const response=await api.get(`/favorites`);return response.data;}catch(error){var _error$response6;throw((_error$response6=error.response)===null||_error$response6===void 0?void 0:_error$response6.data)||error.message||error;}}};export default songsService;","map":{"version":3,"names":["api","songsService","getAuthors","response","get","data","error","_error$response","message","getSongsByAuthor","author","allSongs","filteredSongs","filter","song","_error$response2","getSong","songId","_error$response3","addFavorite","post","_error$response4","removeFavorite","delete","_error$response5","getFavorites","_error$response6"],"sources":["E:/Project/front/chord-site/src/services/songsService.js"],"sourcesContent":["import api from './api';\r\n\r\nconst songsService = {\r\n  // Получение списка авторов (каждый автор — строка)\r\n  getAuthors: async () => {\r\n    try {\r\n      const response = await api.get('/songs/authors');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message || error;\r\n    }\r\n  },\r\n\r\n  // Получение песен по выбранному автору\r\n  getSongsByAuthor: async (author) => {\r\n    try {\r\n      const response = await api.get('/songs');\r\n      const allSongs = response.data;\r\n      const filteredSongs = allSongs.filter(song => song.author === author);\r\n      return filteredSongs;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message || error;\r\n    }\r\n  },\r\n\r\n  // Получение деталей песни\r\n  getSong: async (songId) => {\r\n    try {\r\n      const response = await api.get(`/songs/${songId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message || error;\r\n    }\r\n  },\r\n\r\n  // Добавление песни в избранное\r\n  addFavorite: async (songId) => {\r\n    try {\r\n      const response = await api.post(`/favorites/add/${songId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message || error;\r\n    }\r\n  },\r\n\r\n  // Удаление песни из избранного\r\n  removeFavorite: async (songId) => {\r\n    try {\r\n      const response = await api.delete(`/favorites/remove/${songId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message || error;\r\n    }\r\n  },\r\n\r\n  // Получение избранных песен пользователя\r\n  getFavorites: async () => {\r\n    try {\r\n      const response = await api.get(`/favorites`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message || error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default songsService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}