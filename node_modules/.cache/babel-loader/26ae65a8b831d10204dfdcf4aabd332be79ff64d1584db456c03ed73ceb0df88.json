{"ast":null,"code":"\"use strict\";\n\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HubConnectionBuilder = void 0;\nconst DefaultReconnectPolicy_1 = require(\"./DefaultReconnectPolicy\");\nconst HttpConnection_1 = require(\"./HttpConnection\");\nconst HubConnection_1 = require(\"./HubConnection\");\nconst ILogger_1 = require(\"./ILogger\");\nconst JsonHubProtocol_1 = require(\"./JsonHubProtocol\");\nconst Loggers_1 = require(\"./Loggers\");\nconst Utils_1 = require(\"./Utils\");\nconst LogLevelNameMapping = {\n  trace: ILogger_1.LogLevel.Trace,\n  debug: ILogger_1.LogLevel.Debug,\n  info: ILogger_1.LogLevel.Information,\n  information: ILogger_1.LogLevel.Information,\n  warn: ILogger_1.LogLevel.Warning,\n  warning: ILogger_1.LogLevel.Warning,\n  error: ILogger_1.LogLevel.Error,\n  critical: ILogger_1.LogLevel.Critical,\n  none: ILogger_1.LogLevel.None\n};\nfunction parseLogLevel(name) {\n  // Case-insensitive matching via lower-casing\n  // Yes, I know case-folding is a complicated problem in Unicode, but we only support\n  // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\n  const mapping = LogLevelNameMapping[name.toLowerCase()];\n  if (typeof mapping !== \"undefined\") {\n    return mapping;\n  } else {\n    throw new Error(`Unknown log level: ${name}`);\n  }\n}\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\nclass HubConnectionBuilder {\n  configureLogging(logging) {\n    Utils_1.Arg.isRequired(logging, \"logging\");\n    if (isLogger(logging)) {\n      this.logger = logging;\n    } else if (typeof logging === \"string\") {\n      const logLevel = parseLogLevel(logging);\n      this.logger = new Utils_1.ConsoleLogger(logLevel);\n    } else {\n      this.logger = new Utils_1.ConsoleLogger(logging);\n    }\n    return this;\n  }\n  withUrl(url, transportTypeOrOptions) {\n    Utils_1.Arg.isRequired(url, \"url\");\n    Utils_1.Arg.isNotEmpty(url, \"url\");\n    this.url = url;\n    // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\n    // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\n    if (typeof transportTypeOrOptions === \"object\") {\n      this.httpConnectionOptions = {\n        ...this.httpConnectionOptions,\n        ...transportTypeOrOptions\n      };\n    } else {\n      this.httpConnectionOptions = {\n        ...this.httpConnectionOptions,\n        transport: transportTypeOrOptions\n      };\n    }\n    return this;\n  }\n  /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n   *\r\n   * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n   */\n  withHubProtocol(protocol) {\n    Utils_1.Arg.isRequired(protocol, \"protocol\");\n    this.protocol = protocol;\n    return this;\n  }\n  withAutomaticReconnect(retryDelaysOrReconnectPolicy) {\n    if (this.reconnectPolicy) {\n      throw new Error(\"A reconnectPolicy has already been set.\");\n    }\n    if (!retryDelaysOrReconnectPolicy) {\n      this.reconnectPolicy = new DefaultReconnectPolicy_1.DefaultReconnectPolicy();\n    } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\n      this.reconnectPolicy = new DefaultReconnectPolicy_1.DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\n    } else {\n      this.reconnectPolicy = retryDelaysOrReconnectPolicy;\n    }\n    return this;\n  }\n  /** Configures {@link @microsoft/signalr.HubConnection.serverTimeoutInMilliseconds} for the {@link @microsoft/signalr.HubConnection}.\r\n   *\r\n   * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n   */\n  withServerTimeout(milliseconds) {\n    Utils_1.Arg.isRequired(milliseconds, \"milliseconds\");\n    this._serverTimeoutInMilliseconds = milliseconds;\n    return this;\n  }\n  /** Configures {@link @microsoft/signalr.HubConnection.keepAliveIntervalInMilliseconds} for the {@link @microsoft/signalr.HubConnection}.\r\n   *\r\n   * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n   */\n  withKeepAliveInterval(milliseconds) {\n    Utils_1.Arg.isRequired(milliseconds, \"milliseconds\");\n    this._keepAliveIntervalInMilliseconds = milliseconds;\n    return this;\n  }\n  /** Enables and configures options for the Stateful Reconnect feature.\r\n   *\r\n   * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n   */\n  withStatefulReconnect(options) {\n    if (this.httpConnectionOptions === undefined) {\n      this.httpConnectionOptions = {};\n    }\n    this.httpConnectionOptions._useStatefulReconnect = true;\n    this._statefulReconnectBufferSize = options === null || options === void 0 ? void 0 : options.bufferSize;\n    return this;\n  }\n  /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n   *\r\n   * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n   */\n  build() {\n    // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\n    // provided to configureLogger\n    const httpConnectionOptions = this.httpConnectionOptions || {};\n    // If it's 'null', the user **explicitly** asked for null, don't mess with it.\n    if (httpConnectionOptions.logger === undefined) {\n      // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\n      httpConnectionOptions.logger = this.logger;\n    }\n    // Now create the connection\n    if (!this.url) {\n      throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\n    }\n    const connection = new HttpConnection_1.HttpConnection(this.url, httpConnectionOptions);\n    return HubConnection_1.HubConnection.create(connection, this.logger || Loggers_1.NullLogger.instance, this.protocol || new JsonHubProtocol_1.JsonHubProtocol(), this.reconnectPolicy, this._serverTimeoutInMilliseconds, this._keepAliveIntervalInMilliseconds, this._statefulReconnectBufferSize);\n  }\n}\nexports.HubConnectionBuilder = HubConnectionBuilder;\nfunction isLogger(logger) {\n  return logger.log !== undefined;\n}","map":{"version":3,"names":["DefaultReconnectPolicy_1","require","HttpConnection_1","HubConnection_1","ILogger_1","JsonHubProtocol_1","Loggers_1","Utils_1","LogLevelNameMapping","trace","LogLevel","Trace","debug","Debug","info","Information","information","warn","Warning","warning","error","Error","critical","Critical","none","None","parseLogLevel","name","mapping","toLowerCase","HubConnectionBuilder","configureLogging","logging","Arg","isRequired","isLogger","logger","logLevel","ConsoleLogger","withUrl","url","transportTypeOrOptions","isNotEmpty","httpConnectionOptions","transport","withHubProtocol","protocol","withAutomaticReconnect","retryDelaysOrReconnectPolicy","reconnectPolicy","DefaultReconnectPolicy","Array","isArray","withServerTimeout","milliseconds","_serverTimeoutInMilliseconds","withKeepAliveInterval","_keepAliveIntervalInMilliseconds","withStatefulReconnect","options","undefined","_useStatefulReconnect","_statefulReconnectBufferSize","bufferSize","build","connection","HttpConnection","HubConnection","create","NullLogger","instance","JsonHubProtocol","exports","log"],"sources":["M:\\chord-site\\node_modules\\@microsoft\\signalr\\src\\HubConnectionBuilder.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { IHubProtocol } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { IStatefulReconnectOptions } from \"./IStatefulReconnectOptions\";\r\nimport { HttpTransportType } from \"./ITransport\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n\r\nconst LogLevelNameMapping: {[k: string]: LogLevel} = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\n\r\nfunction parseLogLevel(name: string): LogLevel {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    } else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    private _serverTimeoutInMilliseconds?: number;\r\n    private _keepAliveIntervalInMilliseconds ?: number;\r\n\r\n    /** @internal */\r\n    public protocol?: IHubProtocol;\r\n    /** @internal */\r\n    public httpConnectionOptions?: IHttpConnectionOptions;\r\n    /** @internal */\r\n    public url?: string;\r\n    /** @internal */\r\n    public logger?: ILogger;\r\n\r\n    /** If defined, this indicates the client should automatically attempt to reconnect if the connection is lost. */\r\n    /** @internal */\r\n    public reconnectPolicy?: IRetryPolicy;\r\n\r\n    private _statefulReconnectBufferSize?: number;\r\n\r\n    /** Configures console logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {ILogger} logger An object implementing the {@link @microsoft/signalr.ILogger} interface, which will be used to write all log messages.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {string} logLevel A string representing a LogLevel setting a minimum level of messages to log.\r\n     *    See {@link https://learn.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     */\r\n    public configureLogging(logLevel: string): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel | string | ILogger} logging A {@link @microsoft/signalr.LogLevel}, a string representing a LogLevel, or an object implementing the {@link @microsoft/signalr.ILogger} interface.\r\n     *    See {@link https://learn.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder;\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder {\r\n        Arg.isRequired(logging, \"logging\");\r\n\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        } else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        } else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * The transport will be selected automatically based on what the server and client support.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {HttpTransportType} transportType The specific transport to use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\r\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isNotEmpty(url, \"url\");\r\n\r\n        this.url = url;\r\n\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        } else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     * By default, the client will wait 0, 2, 10 and 30 seconds respectively before trying up to 4 reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {number[]} retryDelays An array containing the delays in milliseconds before trying each reconnect attempt.\r\n     * The length of the array represents how many failed reconnect attempts it takes before the client will stop attempting to reconnect.\r\n     */\r\n    public withAutomaticReconnect(retryDelays: number[]): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {IRetryPolicy} reconnectPolicy An {@link @microsoft/signalR.IRetryPolicy} that controls the timing and number of reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(reconnectPolicy: IRetryPolicy): HubConnectionBuilder;\r\n    public withAutomaticReconnect(retryDelaysOrReconnectPolicy?: number[] | IRetryPolicy): HubConnectionBuilder {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        } else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures {@link @microsoft/signalr.HubConnection.serverTimeoutInMilliseconds} for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withServerTimeout(milliseconds: number): HubConnectionBuilder {\r\n        Arg.isRequired(milliseconds, \"milliseconds\");\r\n\r\n        this._serverTimeoutInMilliseconds = milliseconds;\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures {@link @microsoft/signalr.HubConnection.keepAliveIntervalInMilliseconds} for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withKeepAliveInterval(milliseconds: number): HubConnectionBuilder {\r\n        Arg.isRequired(milliseconds, \"milliseconds\");\r\n\r\n        this._keepAliveIntervalInMilliseconds = milliseconds;\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Enables and configures options for the Stateful Reconnect feature.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withStatefulReconnect(options?: IStatefulReconnectOptions): HubConnectionBuilder {\r\n        if (this.httpConnectionOptions === undefined) {\r\n            this.httpConnectionOptions = {};\r\n        }\r\n        this.httpConnectionOptions._useStatefulReconnect = true;\r\n\r\n        this._statefulReconnectBufferSize = options?.bufferSize;\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    public build(): HubConnection {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n\r\n        return HubConnection.create(\r\n            connection,\r\n            this.logger || NullLogger.instance,\r\n            this.protocol || new JsonHubProtocol(),\r\n            this.reconnectPolicy,\r\n            this._serverTimeoutInMilliseconds,\r\n            this._keepAliveIntervalInMilliseconds,\r\n            this._statefulReconnectBufferSize);\r\n    }\r\n}\r\n\r\nfunction isLogger(logger: any): logger is ILogger {\r\n    return logger.log !== undefined;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}