{"ast":null,"code":"var _jsxFileName = \"M:\\\\chord-site\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport authService from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\n  useEffect(() => {\n    if (token) {\n      // В реальном проекте можно декодировать токен и сохранять данные пользователя\n      const storedUser = localStorage.getItem('user');\n      if (storedUser) {\n        setUser(JSON.parse(storedUser));\n      }\n    }\n  }, [token]);\n  const login = async (email, password) => {\n    try {\n      const data = await authService.login(email, password);\n      setToken(data.token);\n      localStorage.setItem('token', data.token);\n      // Пример: сохраняем минимальные данные пользователя\n      const userData = {\n        email\n      };\n      setUser(userData);\n      localStorage.setItem('user', JSON.stringify(userData));\n      navigate('/');\n    } catch (error) {\n      throw error;\n    }\n  };\n  const register = async (username, email, password) => {\n    try {\n      const data = await authService.register(username, email, password);\n      setToken(data.token);\n      localStorage.setItem('token', data.token);\n      const userData = {\n        username,\n        email\n      };\n      setUser(userData);\n      localStorage.setItem('user', JSON.stringify(userData));\n      navigate('/');\n    } catch (error) {\n      throw error;\n    }\n  };\n  const logout = () => {\n    setToken(null);\n    setUser(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    navigate('/');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"gW10UoAuwVW4qGWvAbOf51REK2s=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useNavigate","authService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","navigate","user","setUser","token","setToken","localStorage","getItem","storedUser","JSON","parse","login","email","password","data","setItem","userData","stringify","error","register","username","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["M:/chord-site/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport authService from '../services/authService';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const navigate = useNavigate();\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      // В реальном проекте можно декодировать токен и сохранять данные пользователя\r\n      const storedUser = localStorage.getItem('user');\r\n      if (storedUser) {\r\n        setUser(JSON.parse(storedUser));\r\n      }\r\n    }\r\n  }, [token]);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const data = await authService.login(email, password);\r\n      setToken(data.token);\r\n      localStorage.setItem('token', data.token);\r\n      // Пример: сохраняем минимальные данные пользователя\r\n      const userData = { email }; \r\n      setUser(userData);\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      navigate('/');\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (username, email, password) => {\r\n    try {\r\n      const data = await authService.register(username, email, password);\r\n      setToken(data.token);\r\n      localStorage.setItem('token', data.token);\r\n      const userData = { username, email };\r\n      setUser(userData);\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      navigate('/');\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setToken(null);\r\n    setUser(null);\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    navigate('/');\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, token, login, register, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,WAAW,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,OAAO,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAACe,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;EAEzEf,SAAS,CAAC,MAAM;IACd,IAAIY,KAAK,EAAE;MACT;MACA,MAAMI,UAAU,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MAC/C,IAAIC,UAAU,EAAE;QACdL,OAAO,CAACM,IAAI,CAACC,KAAK,CAACF,UAAU,CAAC,CAAC;MACjC;IACF;EACF,CAAC,EAAE,CAACJ,KAAK,CAAC,CAAC;EAEX,MAAMO,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACF,MAAMC,IAAI,GAAG,MAAMpB,WAAW,CAACiB,KAAK,CAACC,KAAK,EAAEC,QAAQ,CAAC;MACrDR,QAAQ,CAACS,IAAI,CAACV,KAAK,CAAC;MACpBE,YAAY,CAACS,OAAO,CAAC,OAAO,EAAED,IAAI,CAACV,KAAK,CAAC;MACzC;MACA,MAAMY,QAAQ,GAAG;QAAEJ;MAAM,CAAC;MAC1BT,OAAO,CAACa,QAAQ,CAAC;MACjBV,YAAY,CAACS,OAAO,CAAC,MAAM,EAAEN,IAAI,CAACQ,SAAS,CAACD,QAAQ,CAAC,CAAC;MACtDf,QAAQ,CAAC,GAAG,CAAC;IACf,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,QAAQ,EAAER,KAAK,EAAEC,QAAQ,KAAK;IACpD,IAAI;MACF,MAAMC,IAAI,GAAG,MAAMpB,WAAW,CAACyB,QAAQ,CAACC,QAAQ,EAAER,KAAK,EAAEC,QAAQ,CAAC;MAClER,QAAQ,CAACS,IAAI,CAACV,KAAK,CAAC;MACpBE,YAAY,CAACS,OAAO,CAAC,OAAO,EAAED,IAAI,CAACV,KAAK,CAAC;MACzC,MAAMY,QAAQ,GAAG;QAAEI,QAAQ;QAAER;MAAM,CAAC;MACpCT,OAAO,CAACa,QAAQ,CAAC;MACjBV,YAAY,CAACS,OAAO,CAAC,MAAM,EAAEN,IAAI,CAACQ,SAAS,CAACD,QAAQ,CAAC,CAAC;MACtDf,QAAQ,CAAC,GAAG,CAAC;IACf,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMG,MAAM,GAAGA,CAAA,KAAM;IACnBhB,QAAQ,CAAC,IAAI,CAAC;IACdF,OAAO,CAAC,IAAI,CAAC;IACbG,YAAY,CAACgB,UAAU,CAAC,OAAO,CAAC;IAChChB,YAAY,CAACgB,UAAU,CAAC,MAAM,CAAC;IAC/BrB,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC;EAED,oBACEL,OAAA,CAACC,WAAW,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAEtB,IAAI;MAAEE,KAAK;MAAEO,KAAK;MAAEQ,QAAQ;MAAEE;IAAO,CAAE;IAAAtB,QAAA,EACnEA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC5B,EAAA,CAzDWF,YAAY;EAAA,QACNL,WAAW;AAAA;AAAAoC,EAAA,GADjB/B,YAAY;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}