{"ast":null,"code":"\"use strict\";\n\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggregateErrors = exports.FailedToNegotiateWithServerError = exports.FailedToStartTransportError = exports.DisabledTransportError = exports.UnsupportedTransportError = exports.AbortError = exports.TimeoutError = exports.HttpError = void 0;\n/** Error thrown when an HTTP request fails. */\nclass HttpError extends Error {\n  /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n   *\r\n   * @param {string} errorMessage A descriptive error message.\r\n   * @param {number} statusCode The HTTP status code represented by this error.\r\n   */\n  constructor(errorMessage, statusCode) {\n    const trueProto = new.target.prototype;\n    super(`${errorMessage}: Status code '${statusCode}'`);\n    this.statusCode = statusCode;\n    // Workaround issue in Typescript compiler\n    // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n    this.__proto__ = trueProto;\n  }\n}\nexports.HttpError = HttpError;\n/** Error thrown when a timeout elapses. */\nclass TimeoutError extends Error {\n  /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n   *\r\n   * @param {string} errorMessage A descriptive error message.\r\n   */\n  constructor(errorMessage = \"A timeout occurred.\") {\n    const trueProto = new.target.prototype;\n    super(errorMessage);\n    // Workaround issue in Typescript compiler\n    // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n    this.__proto__ = trueProto;\n  }\n}\nexports.TimeoutError = TimeoutError;\n/** Error thrown when an action is aborted. */\nclass AbortError extends Error {\n  /** Constructs a new instance of {@link AbortError}.\r\n   *\r\n   * @param {string} errorMessage A descriptive error message.\r\n   */\n  constructor(errorMessage = \"An abort occurred.\") {\n    const trueProto = new.target.prototype;\n    super(errorMessage);\n    // Workaround issue in Typescript compiler\n    // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n    this.__proto__ = trueProto;\n  }\n}\nexports.AbortError = AbortError;\n/** Error thrown when the selected transport is unsupported by the browser. */\n/** @private */\nclass UnsupportedTransportError extends Error {\n  /** Constructs a new instance of {@link @microsoft/signalr.UnsupportedTransportError}.\r\n   *\r\n   * @param {string} message A descriptive error message.\r\n   * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n   */\n  constructor(message, transport) {\n    const trueProto = new.target.prototype;\n    super(message);\n    this.transport = transport;\n    this.errorType = 'UnsupportedTransportError';\n    // Workaround issue in Typescript compiler\n    // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n    this.__proto__ = trueProto;\n  }\n}\nexports.UnsupportedTransportError = UnsupportedTransportError;\n/** Error thrown when the selected transport is disabled by the browser. */\n/** @private */\nclass DisabledTransportError extends Error {\n  /** Constructs a new instance of {@link @microsoft/signalr.DisabledTransportError}.\r\n   *\r\n   * @param {string} message A descriptive error message.\r\n   * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n   */\n  constructor(message, transport) {\n    const trueProto = new.target.prototype;\n    super(message);\n    this.transport = transport;\n    this.errorType = 'DisabledTransportError';\n    // Workaround issue in Typescript compiler\n    // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n    this.__proto__ = trueProto;\n  }\n}\nexports.DisabledTransportError = DisabledTransportError;\n/** Error thrown when the selected transport cannot be started. */\n/** @private */\nclass FailedToStartTransportError extends Error {\n  /** Constructs a new instance of {@link @microsoft/signalr.FailedToStartTransportError}.\r\n   *\r\n   * @param {string} message A descriptive error message.\r\n   * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n   */\n  constructor(message, transport) {\n    const trueProto = new.target.prototype;\n    super(message);\n    this.transport = transport;\n    this.errorType = 'FailedToStartTransportError';\n    // Workaround issue in Typescript compiler\n    // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n    this.__proto__ = trueProto;\n  }\n}\nexports.FailedToStartTransportError = FailedToStartTransportError;\n/** Error thrown when the negotiation with the server failed to complete. */\n/** @private */\nclass FailedToNegotiateWithServerError extends Error {\n  /** Constructs a new instance of {@link @microsoft/signalr.FailedToNegotiateWithServerError}.\r\n   *\r\n   * @param {string} message A descriptive error message.\r\n   */\n  constructor(message) {\n    const trueProto = new.target.prototype;\n    super(message);\n    this.errorType = 'FailedToNegotiateWithServerError';\n    // Workaround issue in Typescript compiler\n    // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n    this.__proto__ = trueProto;\n  }\n}\nexports.FailedToNegotiateWithServerError = FailedToNegotiateWithServerError;\n/** Error thrown when multiple errors have occurred. */\n/** @private */\nclass AggregateErrors extends Error {\n  /** Constructs a new instance of {@link @microsoft/signalr.AggregateErrors}.\r\n   *\r\n   * @param {string} message A descriptive error message.\r\n   * @param {Error[]} innerErrors The collection of errors this error is aggregating.\r\n   */\n  constructor(message, innerErrors) {\n    const trueProto = new.target.prototype;\n    super(message);\n    this.innerErrors = innerErrors;\n    // Workaround issue in Typescript compiler\n    // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n    this.__proto__ = trueProto;\n  }\n}\nexports.AggregateErrors = AggregateErrors;","map":{"version":3,"names":["HttpError","Error","constructor","errorMessage","statusCode","trueProto","new","target","prototype","__proto__","exports","TimeoutError","AbortError","UnsupportedTransportError","message","transport","errorType","DisabledTransportError","FailedToStartTransportError","FailedToNegotiateWithServerError","AggregateErrors","innerErrors"],"sources":["M:\\chord-site\\node_modules\\@microsoft\\signalr\\src\\Errors.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpTransportType } from \"./ITransport\";\r\n\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The HTTP status code represented by this error. */\r\n    public statusCode: number;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage: string, statusCode: number) {\r\n        const trueProto = new.target.prototype;\r\n        super(`${errorMessage}: Status code '${statusCode}'`);\r\n        this.statusCode = statusCode;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when an action is aborted. */\r\nexport class AbortError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"An abort occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport is unsupported by the browser. */\r\n/** @private */\r\nexport class UnsupportedTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occurred on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.UnsupportedTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'UnsupportedTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport is disabled by the browser. */\r\n/** @private */\r\nexport class DisabledTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occurred on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.DisabledTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'DisabledTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport cannot be started. */\r\n/** @private */\r\nexport class FailedToStartTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occurred on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToStartTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'FailedToStartTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the negotiation with the server failed to complete. */\r\n/** @private */\r\nexport class FailedToNegotiateWithServerError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToNegotiateWithServerError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     */\r\n    constructor(message: string) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.errorType = 'FailedToNegotiateWithServerError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when multiple errors have occurred. */\r\n/** @private */\r\nexport class AggregateErrors extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The collection of errors this error is aggregating. */\r\n    public innerErrors: Error[];\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.AggregateErrors}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {Error[]} innerErrors The collection of errors this error is aggregating.\r\n     */\r\n    constructor(message: string, innerErrors: Error[]) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n\r\n        this.innerErrors = innerErrors;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n"],"mappings":";;AAAA;AACA;;;;;AAIA;AACA,MAAaA,SAAU,SAAQC,KAAK;EAQhC;;;;;EAKAC,YAAYC,YAAoB,EAAEC,UAAkB;IAChD,MAAMC,SAAS,GAAGC,GAAG,CAACC,MAAM,CAACC,SAAS;IACtC,KAAK,CAAC,GAAGL,YAAY,kBAAkBC,UAAU,GAAG,CAAC;IACrD,IAAI,CAACA,UAAU,GAAGA,UAAU;IAE5B;IACA;IACA,IAAI,CAACK,SAAS,GAAGJ,SAAS;EAC9B;;AArBJK,OAAA,CAAAV,SAAA,GAAAA,SAAA;AAwBA;AACA,MAAaW,YAAa,SAAQV,KAAK;EAKnC;;;;EAIAC,YAAYC,YAAA,GAAuB,qBAAqB;IACpD,MAAME,SAAS,GAAGC,GAAG,CAACC,MAAM,CAACC,SAAS;IACtC,KAAK,CAACL,YAAY,CAAC;IAEnB;IACA;IACA,IAAI,CAACM,SAAS,GAAGJ,SAAS;EAC9B;;AAhBJK,OAAA,CAAAC,YAAA,GAAAA,YAAA;AAmBA;AACA,MAAaC,UAAW,SAAQX,KAAK;EAKjC;;;;EAIAC,YAAYC,YAAA,GAAuB,oBAAoB;IACnD,MAAME,SAAS,GAAGC,GAAG,CAACC,MAAM,CAACC,SAAS;IACtC,KAAK,CAACL,YAAY,CAAC;IAEnB;IACA;IACA,IAAI,CAACM,SAAS,GAAGJ,SAAS;EAC9B;;AAhBJK,OAAA,CAAAE,UAAA,GAAAA,UAAA;AAmBA;AACA;AACA,MAAaC,yBAA0B,SAAQZ,KAAK;EAWhD;;;;;EAKAC,YAAYY,OAAe,EAAEC,SAA4B;IACrD,MAAMV,SAAS,GAAGC,GAAG,CAACC,MAAM,CAACC,SAAS;IACtC,KAAK,CAACM,OAAO,CAAC;IACd,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,SAAS,GAAG,2BAA2B;IAE5C;IACA;IACA,IAAI,CAACP,SAAS,GAAGJ,SAAS;EAC9B;;AAzBJK,OAAA,CAAAG,yBAAA,GAAAA,yBAAA;AA4BA;AACA;AACA,MAAaI,sBAAuB,SAAQhB,KAAK;EAW7C;;;;;EAKAC,YAAYY,OAAe,EAAEC,SAA4B;IACrD,MAAMV,SAAS,GAAGC,GAAG,CAACC,MAAM,CAACC,SAAS;IACtC,KAAK,CAACM,OAAO,CAAC;IACd,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,SAAS,GAAG,wBAAwB;IAEzC;IACA;IACA,IAAI,CAACP,SAAS,GAAGJ,SAAS;EAC9B;;AAzBJK,OAAA,CAAAO,sBAAA,GAAAA,sBAAA;AA4BA;AACA;AACA,MAAaC,2BAA4B,SAAQjB,KAAK;EAWlD;;;;;EAKAC,YAAYY,OAAe,EAAEC,SAA4B;IACrD,MAAMV,SAAS,GAAGC,GAAG,CAACC,MAAM,CAACC,SAAS;IACtC,KAAK,CAACM,OAAO,CAAC;IACd,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,SAAS,GAAG,6BAA6B;IAE9C;IACA;IACA,IAAI,CAACP,SAAS,GAAGJ,SAAS;EAC9B;;AAzBJK,OAAA,CAAAQ,2BAAA,GAAAA,2BAAA;AA4BA;AACA;AACA,MAAaC,gCAAiC,SAAQlB,KAAK;EAQvD;;;;EAIAC,YAAYY,OAAe;IACvB,MAAMT,SAAS,GAAGC,GAAG,CAACC,MAAM,CAACC,SAAS;IACtC,KAAK,CAACM,OAAO,CAAC;IACd,IAAI,CAACE,SAAS,GAAG,kCAAkC;IAEnD;IACA;IACA,IAAI,CAACP,SAAS,GAAGJ,SAAS;EAC9B;;AApBJK,OAAA,CAAAS,gCAAA,GAAAA,gCAAA;AAuBA;AACA;AACA,MAAaC,eAAgB,SAAQnB,KAAK;EAQtC;;;;;EAKAC,YAAYY,OAAe,EAAEO,WAAoB;IAC7C,MAAMhB,SAAS,GAAGC,GAAG,CAACC,MAAM,CAACC,SAAS;IACtC,KAAK,CAACM,OAAO,CAAC;IAEd,IAAI,CAACO,WAAW,GAAGA,WAAW;IAE9B;IACA;IACA,IAAI,CAACZ,SAAS,GAAGJ,SAAS;EAC9B;;AAtBJK,OAAA,CAAAU,eAAA,GAAAA,eAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}