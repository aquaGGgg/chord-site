{"ast":null,"code":"\"use strict\";\n\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonHubProtocol = void 0;\nconst IHubProtocol_1 = require(\"./IHubProtocol\");\nconst ILogger_1 = require(\"./ILogger\");\nconst ITransport_1 = require(\"./ITransport\");\nconst Loggers_1 = require(\"./Loggers\");\nconst TextMessageFormat_1 = require(\"./TextMessageFormat\");\nconst JSON_HUB_PROTOCOL_NAME = \"json\";\n/** Implements the JSON Hub Protocol. */\nclass JsonHubProtocol {\n  constructor() {\n    /** @inheritDoc */\n    this.name = JSON_HUB_PROTOCOL_NAME;\n    /** @inheritDoc */\n    this.version = 2;\n    /** @inheritDoc */\n    this.transferFormat = ITransport_1.TransferFormat.Text;\n  }\n  /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n   *\r\n   * @param {string} input A string containing the serialized representation.\r\n   * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n   */\n  parseMessages(input, logger) {\n    // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\n    if (typeof input !== \"string\") {\n      throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\n    }\n    if (!input) {\n      return [];\n    }\n    if (logger === null) {\n      logger = Loggers_1.NullLogger.instance;\n    }\n    // Parse the messages\n    const messages = TextMessageFormat_1.TextMessageFormat.parse(input);\n    const hubMessages = [];\n    for (const message of messages) {\n      const parsedMessage = JSON.parse(message);\n      if (typeof parsedMessage.type !== \"number\") {\n        throw new Error(\"Invalid payload.\");\n      }\n      switch (parsedMessage.type) {\n        case IHubProtocol_1.MessageType.Invocation:\n          this._isInvocationMessage(parsedMessage);\n          break;\n        case IHubProtocol_1.MessageType.StreamItem:\n          this._isStreamItemMessage(parsedMessage);\n          break;\n        case IHubProtocol_1.MessageType.Completion:\n          this._isCompletionMessage(parsedMessage);\n          break;\n        case IHubProtocol_1.MessageType.Ping:\n          // Single value, no need to validate\n          break;\n        case IHubProtocol_1.MessageType.Close:\n          // All optional values, no need to validate\n          break;\n        case IHubProtocol_1.MessageType.Ack:\n          this._isAckMessage(parsedMessage);\n          break;\n        case IHubProtocol_1.MessageType.Sequence:\n          this._isSequenceMessage(parsedMessage);\n          break;\n        default:\n          // Future protocol changes can add message types, old clients can ignore them\n          logger.log(ILogger_1.LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\n          continue;\n      }\n      hubMessages.push(parsedMessage);\n    }\n    return hubMessages;\n  }\n  /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n   *\r\n   * @param {HubMessage} message The message to write.\r\n   * @returns {string} A string containing the serialized representation of the message.\r\n   */\n  writeMessage(message) {\n    return TextMessageFormat_1.TextMessageFormat.write(JSON.stringify(message));\n  }\n  _isInvocationMessage(message) {\n    this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\n    if (message.invocationId !== undefined) {\n      this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\n    }\n  }\n  _isStreamItemMessage(message) {\n    this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\n    if (message.item === undefined) {\n      throw new Error(\"Invalid payload for StreamItem message.\");\n    }\n  }\n  _isCompletionMessage(message) {\n    if (message.result && message.error) {\n      throw new Error(\"Invalid payload for Completion message.\");\n    }\n    if (!message.result && message.error) {\n      this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\n    }\n    this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\n  }\n  _isAckMessage(message) {\n    if (typeof message.sequenceId !== 'number') {\n      throw new Error(\"Invalid SequenceId for Ack message.\");\n    }\n  }\n  _isSequenceMessage(message) {\n    if (typeof message.sequenceId !== 'number') {\n      throw new Error(\"Invalid SequenceId for Sequence message.\");\n    }\n  }\n  _assertNotEmptyString(value, errorMessage) {\n    if (typeof value !== \"string\" || value === \"\") {\n      throw new Error(errorMessage);\n    }\n  }\n}\nexports.JsonHubProtocol = JsonHubProtocol;","map":{"version":3,"names":["IHubProtocol_1","require","ILogger_1","ITransport_1","Loggers_1","TextMessageFormat_1","JSON_HUB_PROTOCOL_NAME","JsonHubProtocol","constructor","name","version","transferFormat","TransferFormat","Text","parseMessages","input","logger","Error","NullLogger","instance","messages","TextMessageFormat","parse","hubMessages","message","parsedMessage","JSON","type","MessageType","Invocation","_isInvocationMessage","StreamItem","_isStreamItemMessage","Completion","_isCompletionMessage","Ping","Close","Ack","_isAckMessage","Sequence","_isSequenceMessage","log","LogLevel","Information","push","writeMessage","write","stringify","_assertNotEmptyString","target","invocationId","undefined","item","result","error","sequenceId","value","errorMessage","exports"],"sources":["M:\\chord-site\\node_modules\\@microsoft\\signalr\\src\\JsonHubProtocol.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AckMessage, CompletionMessage, HubMessage, IHubProtocol, InvocationMessage, MessageType, SequenceMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nconst JSON_HUB_PROTOCOL_NAME: string = \"json\";\r\n\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol implements IHubProtocol {\r\n\r\n    /** @inheritDoc */\r\n    public readonly name: string = JSON_HUB_PROTOCOL_NAME;\r\n    /** @inheritDoc */\r\n    public readonly version: number = 2;\r\n\r\n    /** @inheritDoc */\r\n    public readonly transferFormat: TransferFormat = TransferFormat.Text;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    public parseMessages(input: string, logger: ILogger): HubMessage[] {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n\r\n        if (!input) {\r\n            return [];\r\n        }\r\n\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message) as HubMessage;\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this._isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this._isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this._isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                case MessageType.Ack:\r\n                    this._isAckMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Sequence:\r\n                    this._isSequenceMessage(parsedMessage);\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n\r\n        return hubMessages;\r\n    }\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    public writeMessage(message: HubMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n\r\n    private _isInvocationMessage(message: InvocationMessage): void {\r\n        this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n\r\n        if (message.invocationId !== undefined) {\r\n            this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n\r\n    private _isStreamItemMessage(message: StreamItemMessage): void {\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n\r\n    private _isCompletionMessage(message: CompletionMessage): void {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        if (!message.result && message.error) {\r\n            this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n\r\n    private _isAckMessage(message: AckMessage): void {\r\n        if (typeof message.sequenceId !== 'number') {\r\n            throw new Error(\"Invalid SequenceId for Ack message.\");\r\n        }\r\n    }\r\n\r\n    private _isSequenceMessage(message: SequenceMessage): void {\r\n        if (typeof message.sequenceId !== 'number') {\r\n            throw new Error(\"Invalid SequenceId for Sequence message.\");\r\n        }\r\n    }\r\n\r\n    private _assertNotEmptyString(value: any, errorMessage: string): void {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n"],"mappings":";;AAAA;AACA;;;;;AAEA,MAAAA,cAAA,GAAAC,OAAA;AACA,MAAAC,SAAA,GAAAD,OAAA;AACA,MAAAE,YAAA,GAAAF,OAAA;AACA,MAAAG,SAAA,GAAAH,OAAA;AACA,MAAAI,mBAAA,GAAAJ,OAAA;AAEA,MAAMK,sBAAsB,GAAW,MAAM;AAE7C;AACA,MAAaC,eAAe;EAA5BC,YAAA;IAEI;IACgB,KAAAC,IAAI,GAAWH,sBAAsB;IACrD;IACgB,KAAAI,OAAO,GAAW,CAAC;IAEnC;IACgB,KAAAC,cAAc,GAAmBR,YAAA,CAAAS,cAAc,CAACC,IAAI;EAqHxE;EAnHI;;;;;EAKOC,aAAaA,CAACC,KAAa,EAAEC,MAAe;IAC/C;IACA,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;MAC3B,MAAM,IAAIE,KAAK,CAAC,yDAAyD,CAAC;;IAG9E,IAAI,CAACF,KAAK,EAAE;MACR,OAAO,EAAE;;IAGb,IAAIC,MAAM,KAAK,IAAI,EAAE;MACjBA,MAAM,GAAGZ,SAAA,CAAAc,UAAU,CAACC,QAAQ;;IAGhC;IACA,MAAMC,QAAQ,GAAGf,mBAAA,CAAAgB,iBAAiB,CAACC,KAAK,CAACP,KAAK,CAAC;IAE/C,MAAMQ,WAAW,GAAG,EAAE;IACtB,KAAK,MAAMC,OAAO,IAAIJ,QAAQ,EAAE;MAC5B,MAAMK,aAAa,GAAGC,IAAI,CAACJ,KAAK,CAACE,OAAO,CAAe;MACvD,IAAI,OAAOC,aAAa,CAACE,IAAI,KAAK,QAAQ,EAAE;QACxC,MAAM,IAAIV,KAAK,CAAC,kBAAkB,CAAC;;MAEvC,QAAQQ,aAAa,CAACE,IAAI;QACtB,KAAK3B,cAAA,CAAA4B,WAAW,CAACC,UAAU;UACvB,IAAI,CAACC,oBAAoB,CAACL,aAAa,CAAC;UACxC;QACJ,KAAKzB,cAAA,CAAA4B,WAAW,CAACG,UAAU;UACvB,IAAI,CAACC,oBAAoB,CAACP,aAAa,CAAC;UACxC;QACJ,KAAKzB,cAAA,CAAA4B,WAAW,CAACK,UAAU;UACvB,IAAI,CAACC,oBAAoB,CAACT,aAAa,CAAC;UACxC;QACJ,KAAKzB,cAAA,CAAA4B,WAAW,CAACO,IAAI;UACjB;UACA;QACJ,KAAKnC,cAAA,CAAA4B,WAAW,CAACQ,KAAK;UAClB;UACA;QACJ,KAAKpC,cAAA,CAAA4B,WAAW,CAACS,GAAG;UAChB,IAAI,CAACC,aAAa,CAACb,aAAa,CAAC;UACjC;QACJ,KAAKzB,cAAA,CAAA4B,WAAW,CAACW,QAAQ;UACrB,IAAI,CAACC,kBAAkB,CAACf,aAAa,CAAC;UACtC;QACJ;UACI;UACAT,MAAM,CAACyB,GAAG,CAACvC,SAAA,CAAAwC,QAAQ,CAACC,WAAW,EAAE,wBAAwB,GAAGlB,aAAa,CAACE,IAAI,GAAG,YAAY,CAAC;UAC9F;;MAERJ,WAAW,CAACqB,IAAI,CAACnB,aAAa,CAAC;;IAGnC,OAAOF,WAAW;EACtB;EAEA;;;;;EAKOsB,YAAYA,CAACrB,OAAmB;IACnC,OAAOnB,mBAAA,CAAAgB,iBAAiB,CAACyB,KAAK,CAACpB,IAAI,CAACqB,SAAS,CAACvB,OAAO,CAAC,CAAC;EAC3D;EAEQM,oBAAoBA,CAACN,OAA0B;IACnD,IAAI,CAACwB,qBAAqB,CAACxB,OAAO,CAACyB,MAAM,EAAE,yCAAyC,CAAC;IAErF,IAAIzB,OAAO,CAAC0B,YAAY,KAAKC,SAAS,EAAE;MACpC,IAAI,CAACH,qBAAqB,CAACxB,OAAO,CAAC0B,YAAY,EAAE,yCAAyC,CAAC;;EAEnG;EAEQlB,oBAAoBA,CAACR,OAA0B;IACnD,IAAI,CAACwB,qBAAqB,CAACxB,OAAO,CAAC0B,YAAY,EAAE,yCAAyC,CAAC;IAE3F,IAAI1B,OAAO,CAAC4B,IAAI,KAAKD,SAAS,EAAE;MAC5B,MAAM,IAAIlC,KAAK,CAAC,yCAAyC,CAAC;;EAElE;EAEQiB,oBAAoBA,CAACV,OAA0B;IACnD,IAAIA,OAAO,CAAC6B,MAAM,IAAI7B,OAAO,CAAC8B,KAAK,EAAE;MACjC,MAAM,IAAIrC,KAAK,CAAC,yCAAyC,CAAC;;IAG9D,IAAI,CAACO,OAAO,CAAC6B,MAAM,IAAI7B,OAAO,CAAC8B,KAAK,EAAE;MAClC,IAAI,CAACN,qBAAqB,CAACxB,OAAO,CAAC8B,KAAK,EAAE,yCAAyC,CAAC;;IAGxF,IAAI,CAACN,qBAAqB,CAACxB,OAAO,CAAC0B,YAAY,EAAE,yCAAyC,CAAC;EAC/F;EAEQZ,aAAaA,CAACd,OAAmB;IACrC,IAAI,OAAOA,OAAO,CAAC+B,UAAU,KAAK,QAAQ,EAAE;MACxC,MAAM,IAAItC,KAAK,CAAC,qCAAqC,CAAC;;EAE9D;EAEQuB,kBAAkBA,CAAChB,OAAwB;IAC/C,IAAI,OAAOA,OAAO,CAAC+B,UAAU,KAAK,QAAQ,EAAE;MACxC,MAAM,IAAItC,KAAK,CAAC,0CAA0C,CAAC;;EAEnE;EAEQ+B,qBAAqBA,CAACQ,KAAU,EAAEC,YAAoB;IAC1D,IAAI,OAAOD,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,EAAE,EAAE;MAC3C,MAAM,IAAIvC,KAAK,CAACwC,YAAY,CAAC;;EAErC;;AA5HJC,OAAA,CAAAnD,eAAA,GAAAA,eAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}