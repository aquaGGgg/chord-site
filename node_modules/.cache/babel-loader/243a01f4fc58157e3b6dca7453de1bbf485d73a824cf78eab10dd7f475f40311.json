{"ast":null,"code":"import api from './api';\nconst songsService = {\n  // Получение списка авторов (каждый автор — строка)\n  getAuthors: async () => {\n    try {\n      const response = await api.get('/songs/authors');\n      return response.data;\n    } catch (error) {\n      throw error.response.data;\n    }\n  },\n  // Получение песен по выбранному автору (фильтрация по строке)\n  getSongsByAuthor: async author => {\n    try {\n      // Получаем все песни\n      const response = await api.get('/songs');\n      // Фильтруем песни по автору\n      const allSongs = response.data;\n      const filteredSongs = allSongs.filter(song => song.author === author);\n      return filteredSongs;\n    } catch (error) {\n      throw error.response.data;\n    }\n  },\n  // Получение деталей песни\n  getSong: async songId => {\n    try {\n      const response = await api.get(`/songs/${songId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response.data;\n    }\n  }\n};\nexport default songsService;","map":{"version":3,"names":["api","songsService","getAuthors","response","get","data","error","getSongsByAuthor","author","allSongs","filteredSongs","filter","song","getSong","songId"],"sources":["M:/chord-site/src/services/songsService.js"],"sourcesContent":["import api from './api';\r\n\r\nconst songsService = {\r\n  // Получение списка авторов (каждый автор — строка)\r\n  getAuthors: async () => {\r\n    try {\r\n      const response = await api.get('/songs/authors');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response.data;\r\n    }\r\n  },\r\n  // Получение песен по выбранному автору (фильтрация по строке)\r\n  getSongsByAuthor: async (author) => {\r\n    try {\r\n      // Получаем все песни\r\n      const response = await api.get('/songs');\r\n      // Фильтруем песни по автору\r\n      const allSongs = response.data;\r\n      const filteredSongs = allSongs.filter(song => song.author === author);\r\n      return filteredSongs;\r\n    } catch (error) {\r\n      throw error.response.data;\r\n    }\r\n  },\r\n  // Получение деталей песни\r\n  getSong: async (songId) => {\r\n    try {\r\n      const response = await api.get(`/songs/${songId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response.data;\r\n    }\r\n  },\r\n};\r\n\r\nexport default songsService;\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,YAAY,GAAG;EACnB;EACAC,UAAU,EAAE,MAAAA,CAAA,KAAY;IACtB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,gBAAgB,CAAC;MAChD,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK,CAACH,QAAQ,CAACE,IAAI;IAC3B;EACF,CAAC;EACD;EACAE,gBAAgB,EAAE,MAAOC,MAAM,IAAK;IAClC,IAAI;MACF;MACA,MAAML,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,QAAQ,CAAC;MACxC;MACA,MAAMK,QAAQ,GAAGN,QAAQ,CAACE,IAAI;MAC9B,MAAMK,aAAa,GAAGD,QAAQ,CAACE,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACJ,MAAM,KAAKA,MAAM,CAAC;MACrE,OAAOE,aAAa;IACtB,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACd,MAAMA,KAAK,CAACH,QAAQ,CAACE,IAAI;IAC3B;EACF,CAAC;EACD;EACAQ,OAAO,EAAE,MAAOC,MAAM,IAAK;IACzB,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,UAAUU,MAAM,EAAE,CAAC;MAClD,OAAOX,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK,CAACH,QAAQ,CAACE,IAAI;IAC3B;EACF;AACF,CAAC;AAED,eAAeJ,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}