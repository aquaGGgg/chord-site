{"ast":null,"code":"var _jsxFileName = \"M:\\\\chord-site\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport authService from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\n  useEffect(() => {\n    if (token) {\n      const storedUser = localStorage.getItem('user');\n      if (storedUser) {\n        setUser(JSON.parse(storedUser));\n      }\n    }\n  }, [token]);\n  const login = async (email, password) => {\n    try {\n      if (email === 'admin' && password === 'admin') {\n        const userData = {\n          email: 'admin',\n          username: 'Administrator'\n        };\n        setUser(userData);\n        setToken('fake-admin-token');\n        localStorage.setItem('token', 'fake-admin-token');\n        localStorage.setItem('user', JSON.stringify(userData));\n        navigate('/profile');\n      } else {\n        // Если нужно добавить реальный логин для других пользователей\n        const data = await authService.login(email, password);\n        setToken(data.token);\n        localStorage.setItem('token', data.token);\n        const userData = {\n          email\n        }; // Минимальные данные пользователя\n        setUser(userData);\n        localStorage.setItem('user', JSON.stringify(userData));\n        navigate('/profile');\n      }\n    } catch (error) {\n      throw error;\n    }\n  };\n  const logout = () => {\n    setToken(null);\n    setUser(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    navigate('/login');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"gW10UoAuwVW4qGWvAbOf51REK2s=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useNavigate","authService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","navigate","user","setUser","token","setToken","localStorage","getItem","storedUser","JSON","parse","login","email","password","userData","username","setItem","stringify","data","error","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["M:/chord-site/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport authService from '../services/authService';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const navigate = useNavigate();\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      const storedUser = localStorage.getItem('user');\r\n      if (storedUser) {\r\n        setUser(JSON.parse(storedUser));\r\n      }\r\n    }\r\n  }, [token]);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      if (email === 'admin' && password === 'admin') {\r\n        const userData = { email: 'admin', username: 'Administrator' };\r\n        setUser(userData);\r\n        setToken('fake-admin-token');\r\n        localStorage.setItem('token', 'fake-admin-token');\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        navigate('/profile');\r\n      } else {\r\n        // Если нужно добавить реальный логин для других пользователей\r\n        const data = await authService.login(email, password);\r\n        setToken(data.token);\r\n        localStorage.setItem('token', data.token);\r\n        const userData = { email }; // Минимальные данные пользователя\r\n        setUser(userData);\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        navigate('/profile');\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setToken(null);\r\n    setUser(null);\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    navigate('/login');\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, token, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}