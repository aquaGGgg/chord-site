{"ast":null,"code":"var _jsxFileName = \"E:\\\\Project\\\\front\\\\chord-site\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport authService from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\n  const [refreshToken, setRefreshToken] = useState(localStorage.getItem('refreshToken') || null);\n\n  // Централизованное сохранение auth-данных\n  const setAuthData = (accessToken, refreshToken, userData) => {\n    setToken(accessToken);\n    setRefreshToken(refreshToken);\n    setUser(userData);\n    localStorage.setItem('token', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n    localStorage.setItem('user', JSON.stringify(userData));\n  };\n\n  // Пробуем восстановить сессии из refresh token\n  const tryRefreshTokenAndSetUser = async () => {\n    if (!refreshToken) return;\n    try {\n      const newAccessToken = await authService.refreshToken();\n      const storedUser = JSON.parse(localStorage.getItem('user'));\n      setAuthData(newAccessToken, refreshToken, storedUser);\n    } catch (err) {\n      console.warn(\"Не удалось обновить токен:\", err);\n      logout(); // если refresh невалиден\n    }\n  };\n  useEffect(() => {\n    if (!user && refreshToken) {\n      tryRefreshTokenAndSetUser();\n    }\n  }, []);\n  const login = async (email, password) => {\n    try {\n      // Фейковый админ\n      if (email === 'admin' && password === 'admin') {\n        const userData = {\n          id: 1,\n          email: 'admin',\n          username: 'Administrator',\n          role: 'Admin'\n        };\n        setAuthData('fake-admin-token', 'fake-refresh-token', userData);\n        navigate('/profile');\n        return;\n      }\n      const data = await authService.login(email, password);\n      const userData = {\n        id: 0,\n        email: email,\n        username: email,\n        role: 'User'\n      };\n      setAuthData(data.accessToken, data.refreshToken, userData);\n      navigate('/profile');\n    } catch (error) {\n      console.error(\"Ошибка при входе:\", error);\n      throw error;\n    }\n  };\n  const logout = () => {\n    setToken(null);\n    setUser(null);\n    setRefreshToken(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('user');\n    navigate('/login');\n  };\n  const refreshAccessToken = async () => {\n    try {\n      const newAccessToken = await authService.refreshToken();\n      setToken(newAccessToken);\n      localStorage.setItem('token', newAccessToken);\n      return newAccessToken;\n    } catch (err) {\n      console.warn(\"Ошибка при обновлении токена:\", err);\n      logout();\n      throw err;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      refreshToken,\n      login,\n      logout,\n      refreshAccessToken\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"UwW3ekfK0l6vLUXKoA/CcE3C5Lw=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useNavigate","authService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","navigate","user","setUser","token","setToken","localStorage","getItem","refreshToken","setRefreshToken","setAuthData","accessToken","userData","setItem","JSON","stringify","tryRefreshTokenAndSetUser","newAccessToken","storedUser","parse","err","console","warn","logout","login","email","password","id","username","role","data","error","removeItem","refreshAccessToken","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Project/front/chord-site/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport authService from '../services/authService';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const navigate = useNavigate();\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\r\n  const [refreshToken, setRefreshToken] = useState(localStorage.getItem('refreshToken') || null);\r\n\r\n  // Централизованное сохранение auth-данных\r\n  const setAuthData = (accessToken, refreshToken, userData) => {\r\n    setToken(accessToken);\r\n    setRefreshToken(refreshToken);\r\n    setUser(userData);\r\n\r\n    localStorage.setItem('token', accessToken);\r\n    localStorage.setItem('refreshToken', refreshToken);\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n  };\r\n\r\n  // Пробуем восстановить сессии из refresh token\r\n  const tryRefreshTokenAndSetUser = async () => {\r\n    if (!refreshToken) return;\r\n\r\n    try {\r\n      const newAccessToken = await authService.refreshToken();\r\n      const storedUser = JSON.parse(localStorage.getItem('user'));\r\n\r\n      setAuthData(newAccessToken, refreshToken, storedUser);\r\n    } catch (err) {\r\n      console.warn(\"Не удалось обновить токен:\", err);\r\n      logout(); // если refresh невалиден\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!user && refreshToken) {\r\n      tryRefreshTokenAndSetUser();\r\n    }\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      // Фейковый админ\r\n      if (email === 'admin' && password === 'admin') {\r\n        const userData = { id: 1, email: 'admin', username: 'Administrator', role: 'Admin' };\r\n        setAuthData('fake-admin-token', 'fake-refresh-token', userData);\r\n        navigate('/profile');\r\n        return;\r\n      }\r\n\r\n      const data = await authService.login(email, password);\r\n      const userData = {\r\n        id: 0,\r\n        email: email,\r\n        username: email,\r\n        role: 'User'\r\n      };\r\n      setAuthData(data.accessToken, data.refreshToken, userData);\r\n      navigate('/profile');\r\n    } catch (error) {\r\n      console.error(\"Ошибка при входе:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setToken(null);\r\n    setUser(null);\r\n    setRefreshToken(null);\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('refreshToken');\r\n    localStorage.removeItem('user');\r\n    navigate('/login');\r\n  };\r\n\r\n  const refreshAccessToken = async () => {\r\n    try {\r\n      const newAccessToken = await authService.refreshToken();\r\n      setToken(newAccessToken);\r\n      localStorage.setItem('token', newAccessToken);\r\n      return newAccessToken;\r\n    } catch (err) {\r\n      console.warn(\"Ошибка при обновлении токена:\", err);\r\n      logout();\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, token, refreshToken, login, logout, refreshAccessToken }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}