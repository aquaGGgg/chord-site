{"ast":null,"code":"import api from './api';\nconst authService = {\n  login: async (email, password) => {\n    const response = await api.post('/auth/login', {\n      email,\n      password\n    });\n    const {\n      accessToken,\n      refreshToken\n    } = response.data;\n    localStorage.setItem('token', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n    return response.data;\n  },\n  register: async (username, email, password) => {\n    const response = await api.post('/auth/register', {\n      userName: username,\n      email,\n      password\n    });\n    const {\n      accessToken,\n      refreshToken\n    } = response.data;\n    localStorage.setItem('token', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n    return response.data;\n  },\n  refreshToken: async () => {\n    const refreshToken = localStorage.getItem('refreshToken');\n    if (!refreshToken) throw new Error('No refresh token found');\n    const response = await api.post('/auth/refresh-token', {\n      refreshToken\n    });\n    const {\n      accessToken,\n      refreshToken: newRefreshToken\n    } = response.data;\n    localStorage.setItem('token', accessToken);\n    localStorage.setItem('refreshToken', newRefreshToken);\n    return accessToken;\n  }\n};\nexport default authService;","map":{"version":3,"names":["api","authService","login","email","password","response","post","accessToken","refreshToken","data","localStorage","setItem","register","username","userName","getItem","Error","newRefreshToken"],"sources":["E:/Project/front/chord-site/src/services/authService.js"],"sourcesContent":["import api from './api';\r\n\r\nconst authService = {\r\n  login: async (email, password) => {\r\n    const response = await api.post('/auth/login', { email, password });\r\n    const { accessToken, refreshToken } = response.data;\r\n    localStorage.setItem('token', accessToken);\r\n    localStorage.setItem('refreshToken', refreshToken);\r\n    return response.data;\r\n  },\r\n\r\n  register: async (username, email, password) => {\r\n    const response = await api.post('/auth/register', { userName: username, email, password });\r\n    const { accessToken, refreshToken } = response.data;\r\n    localStorage.setItem('token', accessToken);\r\n    localStorage.setItem('refreshToken', refreshToken);\r\n    return response.data;\r\n  },\r\n\r\n  refreshToken: async () => {\r\n    const refreshToken = localStorage.getItem('refreshToken');\r\n    if (!refreshToken) throw new Error('No refresh token found');\r\n\r\n    const response = await api.post('/auth/refresh-token', { refreshToken });\r\n    const { accessToken, refreshToken: newRefreshToken } = response.data;\r\n\r\n    localStorage.setItem('token', accessToken);\r\n    localStorage.setItem('refreshToken', newRefreshToken);\r\n    return accessToken;\r\n  }\r\n};\r\n\r\nexport default authService;\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,WAAW,GAAG;EAClBC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAChC,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,aAAa,EAAE;MAAEH,KAAK;MAAEC;IAAS,CAAC,CAAC;IACnE,MAAM;MAAEG,WAAW;MAAEC;IAAa,CAAC,GAAGH,QAAQ,CAACI,IAAI;IACnDC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,WAAW,CAAC;IAC1CG,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEH,YAAY,CAAC;IAClD,OAAOH,QAAQ,CAACI,IAAI;EACtB,CAAC;EAEDG,QAAQ,EAAE,MAAAA,CAAOC,QAAQ,EAAEV,KAAK,EAAEC,QAAQ,KAAK;IAC7C,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,gBAAgB,EAAE;MAAEQ,QAAQ,EAAED,QAAQ;MAAEV,KAAK;MAAEC;IAAS,CAAC,CAAC;IAC1F,MAAM;MAAEG,WAAW;MAAEC;IAAa,CAAC,GAAGH,QAAQ,CAACI,IAAI;IACnDC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,WAAW,CAAC;IAC1CG,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEH,YAAY,CAAC;IAClD,OAAOH,QAAQ,CAACI,IAAI;EACtB,CAAC;EAEDD,YAAY,EAAE,MAAAA,CAAA,KAAY;IACxB,MAAMA,YAAY,GAAGE,YAAY,CAACK,OAAO,CAAC,cAAc,CAAC;IACzD,IAAI,CAACP,YAAY,EAAE,MAAM,IAAIQ,KAAK,CAAC,wBAAwB,CAAC;IAE5D,MAAMX,QAAQ,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,qBAAqB,EAAE;MAAEE;IAAa,CAAC,CAAC;IACxE,MAAM;MAAED,WAAW;MAAEC,YAAY,EAAES;IAAgB,CAAC,GAAGZ,QAAQ,CAACI,IAAI;IAEpEC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,WAAW,CAAC;IAC1CG,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEM,eAAe,CAAC;IACrD,OAAOV,WAAW;EACpB;AACF,CAAC;AAED,eAAeN,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}