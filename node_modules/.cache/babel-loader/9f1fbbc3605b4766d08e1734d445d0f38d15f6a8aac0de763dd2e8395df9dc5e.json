{"ast":null,"code":"\"use strict\";\n\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HandshakeProtocol = void 0;\nconst TextMessageFormat_1 = require(\"./TextMessageFormat\");\nconst Utils_1 = require(\"./Utils\");\n/** @private */\nclass HandshakeProtocol {\n  // Handshake request is always JSON\n  writeHandshakeRequest(handshakeRequest) {\n    return TextMessageFormat_1.TextMessageFormat.write(JSON.stringify(handshakeRequest));\n  }\n  parseHandshakeResponse(data) {\n    let messageData;\n    let remainingData;\n    if ((0, Utils_1.isArrayBuffer)(data)) {\n      // Format is binary but still need to read JSON text from handshake response\n      const binaryData = new Uint8Array(data);\n      const separatorIndex = binaryData.indexOf(TextMessageFormat_1.TextMessageFormat.RecordSeparatorCode);\n      if (separatorIndex === -1) {\n        throw new Error(\"Message is incomplete.\");\n      }\n      // content before separator is handshake response\n      // optional content after is additional messages\n      const responseLength = separatorIndex + 1;\n      messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\n      remainingData = binaryData.byteLength > responseLength ? binaryData.slice(responseLength).buffer : null;\n    } else {\n      const textData = data;\n      const separatorIndex = textData.indexOf(TextMessageFormat_1.TextMessageFormat.RecordSeparator);\n      if (separatorIndex === -1) {\n        throw new Error(\"Message is incomplete.\");\n      }\n      // content before separator is handshake response\n      // optional content after is additional messages\n      const responseLength = separatorIndex + 1;\n      messageData = textData.substring(0, responseLength);\n      remainingData = textData.length > responseLength ? textData.substring(responseLength) : null;\n    }\n    // At this point we should have just the single handshake message\n    const messages = TextMessageFormat_1.TextMessageFormat.parse(messageData);\n    const response = JSON.parse(messages[0]);\n    if (response.type) {\n      throw new Error(\"Expected a handshake response from the server.\");\n    }\n    const responseMessage = response;\n    // multiple messages could have arrived with handshake\n    // return additional data to be parsed as usual, or null if all parsed\n    return [remainingData, responseMessage];\n  }\n}\nexports.HandshakeProtocol = HandshakeProtocol;","map":{"version":3,"names":["TextMessageFormat_1","require","Utils_1","HandshakeProtocol","writeHandshakeRequest","handshakeRequest","TextMessageFormat","write","JSON","stringify","parseHandshakeResponse","data","messageData","remainingData","isArrayBuffer","binaryData","Uint8Array","separatorIndex","indexOf","RecordSeparatorCode","Error","responseLength","String","fromCharCode","apply","Array","prototype","slice","call","byteLength","buffer","textData","RecordSeparator","substring","length","messages","parse","response","type","responseMessage","exports"],"sources":["M:\\chord-site\\node_modules\\@microsoft\\signalr\\src\\HandshakeProtocol.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\n/** @private */\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\n/** @private */\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n    readonly minorVersion: number;\r\n}\r\n\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (isArrayBuffer(data)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        const responseMessage: HandshakeResponseMessage = response;\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n"],"mappings":";;AAAA;AACA;;;;;AAEA,MAAAA,mBAAA,GAAAC,OAAA;AACA,MAAAC,OAAA,GAAAD,OAAA;AAcA;AACA,MAAaE,iBAAiB;EAC1B;EACOC,qBAAqBA,CAACC,gBAAyC;IAClE,OAAOL,mBAAA,CAAAM,iBAAiB,CAACC,KAAK,CAACC,IAAI,CAACC,SAAS,CAACJ,gBAAgB,CAAC,CAAC;EACpE;EAEOK,sBAAsBA,CAACC,IAAS;IACnC,IAAIC,WAAmB;IACvB,IAAIC,aAAkB;IAEtB,IAAI,IAAAX,OAAA,CAAAY,aAAa,EAACH,IAAI,CAAC,EAAE;MACrB;MACA,MAAMI,UAAU,GAAG,IAAIC,UAAU,CAACL,IAAI,CAAC;MACvC,MAAMM,cAAc,GAAGF,UAAU,CAACG,OAAO,CAAClB,mBAAA,CAAAM,iBAAiB,CAACa,mBAAmB,CAAC;MAChF,IAAIF,cAAc,KAAK,CAAC,CAAC,EAAE;QACvB,MAAM,IAAIG,KAAK,CAAC,wBAAwB,CAAC;;MAG7C;MACA;MACA,MAAMC,cAAc,GAAGJ,cAAc,GAAG,CAAC;MACzCL,WAAW,GAAGU,MAAM,CAACC,YAAY,CAACC,KAAK,CAAC,IAAI,EAAEC,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACb,UAAU,CAACY,KAAK,CAAC,CAAC,EAAEN,cAAc,CAAC,CAAC,CAAC;MAC9GR,aAAa,GAAIE,UAAU,CAACc,UAAU,GAAGR,cAAc,GAAIN,UAAU,CAACY,KAAK,CAACN,cAAc,CAAC,CAACS,MAAM,GAAG,IAAI;KAC5G,MAAM;MACH,MAAMC,QAAQ,GAAWpB,IAAI;MAC7B,MAAMM,cAAc,GAAGc,QAAQ,CAACb,OAAO,CAAClB,mBAAA,CAAAM,iBAAiB,CAAC0B,eAAe,CAAC;MAC1E,IAAIf,cAAc,KAAK,CAAC,CAAC,EAAE;QACvB,MAAM,IAAIG,KAAK,CAAC,wBAAwB,CAAC;;MAG7C;MACA;MACA,MAAMC,cAAc,GAAGJ,cAAc,GAAG,CAAC;MACzCL,WAAW,GAAGmB,QAAQ,CAACE,SAAS,CAAC,CAAC,EAAEZ,cAAc,CAAC;MACnDR,aAAa,GAAIkB,QAAQ,CAACG,MAAM,GAAGb,cAAc,GAAIU,QAAQ,CAACE,SAAS,CAACZ,cAAc,CAAC,GAAG,IAAI;;IAGlG;IACA,MAAMc,QAAQ,GAAGnC,mBAAA,CAAAM,iBAAiB,CAAC8B,KAAK,CAACxB,WAAW,CAAC;IACrD,MAAMyB,QAAQ,GAAG7B,IAAI,CAAC4B,KAAK,CAACD,QAAQ,CAAC,CAAC,CAAC,CAAC;IACxC,IAAIE,QAAQ,CAACC,IAAI,EAAE;MACf,MAAM,IAAIlB,KAAK,CAAC,gDAAgD,CAAC;;IAErE,MAAMmB,eAAe,GAA6BF,QAAQ;IAE1D;IACA;IACA,OAAO,CAACxB,aAAa,EAAE0B,eAAe,CAAC;EAC3C;;AAhDJC,OAAA,CAAArC,iBAAA,GAAAA,iBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}