{"ast":null,"code":"var _jsxFileName = \"E:\\\\Project\\\\front\\\\chord-site\\\\src\\\\components\\\\SongDetails.jsx\",\n  _s = $RefreshSig$();\n// src/components/SongDetails.jsx\nimport React, { useEffect, useState, useContext } from 'react';\nimport songsService from '../services/songsService'; // убедитесь, что путь правильный\nimport { AuthContext } from '../context/AuthContext';\n\n// ==== Массив нот в хроматическом круге ====\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CHROMATIC_SHARP = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\nconst CHROMATIC_FLAT = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];\nconst SongDetails = ({\n  songId\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [song, setSong] = useState(null);\n  const [isFavorite, setIsFavorite] = useState(false);\n\n  // Новые состояния для транспонирования\n  const [transposeSteps, setTransposeSteps] = useState(0);\n  const [displayedLyrics, setDisplayedLyrics] = useState('');\n  useEffect(() => {\n    const fetchSongDetails = async () => {\n      if (!songId) {\n        setSong(null);\n        setDisplayedLyrics('');\n        setTransposeSteps(0);\n        return;\n      }\n      try {\n        const data = await songsService.getSong(songId);\n        setSong(data);\n\n        // По умолчанию отображаем оригинал (без транспонирования)\n        setDisplayedLyrics(data.lyricsWithChords);\n        setTransposeSteps(0);\n        if (user) {\n          const favorites = await songsService.getFavorites();\n          setIsFavorite(favorites.some(fav => fav.id === songId));\n        }\n      } catch (error) {\n        console.error(\"Ошибка при загрузке песни или избранного\", error);\n      }\n    };\n    fetchSongDetails();\n  }, [songId, user]);\n  const toggleFavorite = async () => {\n    if (!user) return;\n    try {\n      if (isFavorite) {\n        await songsService.removeFavorite(songId);\n        setIsFavorite(false);\n      } else {\n        await songsService.addFavorite(songId);\n        setIsFavorite(true);\n      }\n    } catch (error) {\n      console.error(\"Ошибка при переключении избранного\", error);\n    }\n  };\n\n  // Функция транспонирования одного аккорда на N полутонов\n  const transposeChord = (chord, steps) => {\n    if (!chord || steps === 0) return chord;\n\n    // Регулярка для «той части строки», которая считается аккордом:\n    // например:  Am, A#m7, G7, Dsus4, Bbmaj7, F#dim и т.п.\n    // Захватываем основу (буква), возможный ♯/♭, а далее всё после — это «дополнение» (m, 7, maj7 и т.д.).\n    const match = chord.match(/^([A-G])([#b]?)(.*)$/);\n    if (!match) return chord; // не подходит под схему, возвращаем как есть\n\n    let [, root, accidental, suffix] = match;\n    let useFlats = false;\n\n    // Собираем «начальную» позицию в хроматическом круге\n    let noteName = root;\n    if (accidental === '#') {\n      noteName += '#';\n    } else if (accidental === 'b') {\n      // переписываем в аналог с буквой: например, Ab → Gb? Нет, Ab — это «A♭», а в массиве FLAT есть 'Ab'.\n      noteName += 'b';\n      useFlats = true;\n    }\n\n    // Определяем, в каком массиве искать\n    let chromatic = useFlats ? CHROMATIC_FLAT : CHROMATIC_SHARP;\n    // Если вдруг не нашли в «flat»-массиве, попробуем «sharp»-массив\n    if (!chromatic.includes(noteName)) {\n      if (CHROMATIC_SHARP.includes(noteName)) chromatic = CHROMATIC_SHARP;else if (CHROMATIC_FLAT.includes(noteName)) chromatic = CHROMATIC_FLAT;\n    }\n    let idx = chromatic.findIndex(n => n === noteName);\n    if (idx < 0) return chord; // странный случай, возвращаем нетронутым\n\n    // Сдвигаем на steps полутонов (может быть отрицательным)\n    let newIndex = (idx + steps) % 12;\n    if (newIndex < 0) newIndex += 12;\n    let newRoot = chromatic[newIndex];\n    return newRoot + suffix; // возвращаем новое название + оригинальный «суффикс» (минор, септаккорд и т.д.)\n  };\n\n  // Функция, которая для всего текста песни заменяет каждый аккорд\n  const transposeLyrics = (fullText, steps) => {\n    // Разбиваем текст на строки\n    const lines = fullText.split('\\n');\n    const resultLines = lines.map(line => {\n      // Для каждой строки найдём все «слова», потенциально аккорд:\n      // будем разделять по пробелу, табу и учитывая, что аккорд обычно пишется подряд.\n      // Но может быть смешанный текст: например, “Am G C G Am F C G Am F”\n      // Поэтому разобьём на «токены» по пробелам, и у каждого токена проверим, похож ли он на аккорд.\n      const tokens = line.split(/(\\s+)/); // сохраняем разделители (пробелы), чтобы после собрать обратно\n      const newTokens = tokens.map(tok => {\n        // Если токен — чистый пробел/таб или пустой, оставляем его.\n        if (/^\\s+$/.test(tok) || tok === '') return tok;\n        // Иначе пытаемся транспонировать tok:\n        const transposed = transposeChord(tok, steps);\n        return transposed;\n      });\n      return newTokens.join('');\n    });\n    return resultLines.join('\\n');\n  };\n  const handleTransposeUp = () => {\n    if (!song) return;\n    const newSteps = transposeSteps + 1;\n    setTransposeSteps(newSteps);\n    setDisplayedLyrics(transposeLyrics(song.lyricsWithChords, newSteps));\n  };\n  const handleTransposeDown = () => {\n    if (!song) return;\n    const newSteps = transposeSteps - 1;\n    setTransposeSteps(newSteps);\n    setDisplayedLyrics(transposeLyrics(song.lyricsWithChords, newSteps));\n  };\n  if (!song) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: detailsPlaceholderStyle,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043F\\u0435\\u0441\\u043D\\u044E, \\u0447\\u0442\\u043E\\u0431\\u044B \\u0443\\u0432\\u0438\\u0434\\u0435\\u0442\\u044C \\u0442\\u0435\\u043A\\u0441\\u0442 \\u0441 \\u0430\\u043A\\u043A\\u043E\\u0440\\u0434\\u0430\\u043C\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: detailsContentWrapper,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: detailsContentStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: headerStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          style: titleStyle,\n          children: song.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), user && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleFavorite,\n          style: {\n            ...likeButtonStyle,\n            backgroundColor: isFavorite ? '#d9534f' : '#28a745'\n          },\n          children: isFavorite ? 'Убрать из избранного' : 'В избранное'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        style: authorStyle,\n        children: [\"\\u0418\\u0441\\u043F\\u043E\\u043B\\u043D\\u0438\\u0442\\u0435\\u043B\\u044C: \", song.author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: transposeControlsWrapper,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleTransposeDown,\n          style: transposeButtonStyle,\n          children: \"\\u2193\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: transposeInfoStyle,\n          children: [\"\\u0422\\u043E\\u043D\\u0430\\u043B\\u044C\\u043D\\u043E\\u0441\\u0442\\u044C: \", transposeSteps >= 0 ? `+${transposeSteps}` : transposeSteps, \" \\u043F\\u043E\\u043B\\u0443\\u0442\\u043E\\u043D\\u044B\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleTransposeUp,\n          style: transposeButtonStyle,\n          children: \"\\u2191\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        style: lyricsStyle,\n        children: displayedLyrics\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n\n/** Стили */\n_s(SongDetails, \"laGVTf5KcBCPIPDXfmsQL+Rv0K4=\");\n_c = SongDetails;\nconst detailsContentWrapper = {\n  display: 'flex',\n  justifyContent: 'center',\n  width: '100%'\n};\nconst detailsContentStyle = {\n  width: '100%',\n  maxWidth: '800px',\n  backgroundColor: '#3d4044',\n  padding: '1.5rem',\n  borderRadius: '8px',\n  boxShadow: '0 0 10px rgba(0,0,0,0.5)',\n  fontSize: '1.2rem',\n  lineHeight: '1.6'\n};\nconst detailsPlaceholderStyle = {\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  width: '100%',\n  color: '#ccc'\n};\nconst headerStyle = {\n  display: 'flex',\n  justifyContent: 'space-between',\n  alignItems: 'center'\n};\nconst titleStyle = {\n  marginTop: 0,\n  fontSize: '2rem',\n  fontWeight: 'bold'\n};\nconst authorStyle = {\n  color: '#ccc',\n  marginBottom: '1rem',\n  fontSize: '1.3rem'\n};\nconst transposeControlsWrapper = {\n  display: 'flex',\n  alignItems: 'center',\n  marginBottom: '1rem'\n};\nconst transposeButtonStyle = {\n  padding: '0.3rem 0.6rem',\n  fontSize: '1.2rem',\n  margin: '0 0.5rem',\n  borderRadius: '4px',\n  border: 'none',\n  cursor: 'pointer',\n  backgroundColor: '#555',\n  color: '#fff'\n};\nconst transposeInfoStyle = {\n  color: '#fff',\n  fontSize: '1rem'\n};\nconst lyricsStyle = {\n  whiteSpace: 'pre-wrap',\n  fontFamily: 'monospace',\n  fontSize: '1.2rem',\n  marginTop: '1rem',\n  color: '#fff'\n};\nconst likeButtonStyle = {\n  padding: '0.5rem 1rem',\n  fontSize: '1rem',\n  border: 'none',\n  borderRadius: '6px',\n  color: '#fff',\n  cursor: 'pointer'\n};\nexport default SongDetails;\nvar _c;\n$RefreshReg$(_c, \"SongDetails\");","map":{"version":3,"names":["React","useEffect","useState","useContext","songsService","AuthContext","jsxDEV","_jsxDEV","CHROMATIC_SHARP","CHROMATIC_FLAT","SongDetails","songId","_s","user","song","setSong","isFavorite","setIsFavorite","transposeSteps","setTransposeSteps","displayedLyrics","setDisplayedLyrics","fetchSongDetails","data","getSong","lyricsWithChords","favorites","getFavorites","some","fav","id","error","console","toggleFavorite","removeFavorite","addFavorite","transposeChord","chord","steps","match","root","accidental","suffix","useFlats","noteName","chromatic","includes","idx","findIndex","n","newIndex","newRoot","transposeLyrics","fullText","lines","split","resultLines","map","line","tokens","newTokens","tok","test","transposed","join","handleTransposeUp","newSteps","handleTransposeDown","style","detailsPlaceholderStyle","children","fileName","_jsxFileName","lineNumber","columnNumber","detailsContentWrapper","detailsContentStyle","headerStyle","titleStyle","title","onClick","likeButtonStyle","backgroundColor","authorStyle","author","transposeControlsWrapper","transposeButtonStyle","transposeInfoStyle","lyricsStyle","_c","display","justifyContent","width","maxWidth","padding","borderRadius","boxShadow","fontSize","lineHeight","alignItems","color","marginTop","fontWeight","marginBottom","margin","border","cursor","whiteSpace","fontFamily","$RefreshReg$"],"sources":["E:/Project/front/chord-site/src/components/SongDetails.jsx"],"sourcesContent":["// src/components/SongDetails.jsx\r\nimport React, { useEffect, useState, useContext } from 'react';\r\nimport songsService from '../services/songsService'; // убедитесь, что путь правильный\r\nimport { AuthContext } from '../context/AuthContext';\r\n\r\n// ==== Массив нот в хроматическом круге ====\r\nconst CHROMATIC_SHARP = [\r\n  'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'\r\n];\r\nconst CHROMATIC_FLAT  = [\r\n  'C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'\r\n];\r\n\r\nconst SongDetails = ({ songId }) => {\r\n  const { user } = useContext(AuthContext);\r\n  const [song, setSong] = useState(null);\r\n  const [isFavorite, setIsFavorite] = useState(false);\r\n\r\n  // Новые состояния для транспонирования\r\n  const [transposeSteps, setTransposeSteps] = useState(0); \r\n  const [displayedLyrics, setDisplayedLyrics] = useState(''); \r\n\r\n  useEffect(() => {\r\n    const fetchSongDetails = async () => {\r\n      if (!songId) {\r\n        setSong(null);\r\n        setDisplayedLyrics('');\r\n        setTransposeSteps(0);\r\n        return;\r\n      }\r\n      try {\r\n        const data = await songsService.getSong(songId);\r\n        setSong(data);\r\n\r\n        // По умолчанию отображаем оригинал (без транспонирования)\r\n        setDisplayedLyrics(data.lyricsWithChords);\r\n        setTransposeSteps(0);\r\n\r\n        if (user) {\r\n          const favorites = await songsService.getFavorites();\r\n          setIsFavorite(favorites.some(fav => fav.id === songId));\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Ошибка при загрузке песни или избранного\", error);\r\n      }\r\n    };\r\n\r\n    fetchSongDetails();\r\n  }, [songId, user]);\r\n\r\n  const toggleFavorite = async () => {\r\n    if (!user) return;\r\n    try {\r\n      if (isFavorite) {\r\n        await songsService.removeFavorite(songId);\r\n        setIsFavorite(false);\r\n      } else {\r\n        await songsService.addFavorite(songId);\r\n        setIsFavorite(true);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Ошибка при переключении избранного\", error);\r\n    }\r\n  };\r\n\r\n  // Функция транспонирования одного аккорда на N полутонов\r\n  const transposeChord = (chord, steps) => {\r\n    if (!chord || steps === 0) return chord;\r\n\r\n    // Регулярка для «той части строки», которая считается аккордом:\r\n    // например:  Am, A#m7, G7, Dsus4, Bbmaj7, F#dim и т.п.\r\n    // Захватываем основу (буква), возможный ♯/♭, а далее всё после — это «дополнение» (m, 7, maj7 и т.д.).\r\n    const match = chord.match(/^([A-G])([#b]?)(.*)$/);\r\n    if (!match) return chord; // не подходит под схему, возвращаем как есть\r\n\r\n    let [ , root, accidental, suffix ] = match;\r\n    let useFlats = false;\r\n\r\n    // Собираем «начальную» позицию в хроматическом круге\r\n    let noteName = root;\r\n    if (accidental === '#') {\r\n      noteName += '#';\r\n    } else if (accidental === 'b') {\r\n      // переписываем в аналог с буквой: например, Ab → Gb? Нет, Ab — это «A♭», а в массиве FLAT есть 'Ab'.\r\n      noteName += 'b';\r\n      useFlats = true;\r\n    }\r\n\r\n    // Определяем, в каком массиве искать\r\n    let chromatic = useFlats ? CHROMATIC_FLAT : CHROMATIC_SHARP;\r\n    // Если вдруг не нашли в «flat»-массиве, попробуем «sharp»-массив\r\n    if (!chromatic.includes(noteName)) {\r\n      if (CHROMATIC_SHARP.includes(noteName)) chromatic = CHROMATIC_SHARP;\r\n      else if (CHROMATIC_FLAT.includes(noteName)) chromatic = CHROMATIC_FLAT;\r\n    }\r\n\r\n    let idx = chromatic.findIndex(n => n === noteName);\r\n    if (idx < 0) return chord; // странный случай, возвращаем нетронутым\r\n\r\n    // Сдвигаем на steps полутонов (может быть отрицательным)\r\n    let newIndex = (idx + steps) % 12;\r\n    if (newIndex < 0) newIndex += 12;\r\n\r\n    let newRoot = chromatic[newIndex];\r\n    return newRoot + suffix; // возвращаем новое название + оригинальный «суффикс» (минор, септаккорд и т.д.)\r\n  };\r\n\r\n  // Функция, которая для всего текста песни заменяет каждый аккорд\r\n  const transposeLyrics = (fullText, steps) => {\r\n    // Разбиваем текст на строки\r\n    const lines = fullText.split('\\n');\r\n    const resultLines = lines.map(line => {\r\n      // Для каждой строки найдём все «слова», потенциально аккорд:\r\n      // будем разделять по пробелу, табу и учитывая, что аккорд обычно пишется подряд.\r\n      // Но может быть смешанный текст: например, “Am G C G Am F C G Am F”\r\n      // Поэтому разобьём на «токены» по пробелам, и у каждого токена проверим, похож ли он на аккорд.\r\n      const tokens = line.split(/(\\s+)/); // сохраняем разделители (пробелы), чтобы после собрать обратно\r\n      const newTokens = tokens.map(tok => {\r\n        // Если токен — чистый пробел/таб или пустой, оставляем его.\r\n        if (/^\\s+$/.test(tok) || tok === '') return tok;\r\n        // Иначе пытаемся транспонировать tok:\r\n        const transposed = transposeChord(tok, steps);\r\n        return transposed;\r\n      });\r\n      return newTokens.join('');\r\n    });\r\n    return resultLines.join('\\n');\r\n  };\r\n\r\n  const handleTransposeUp = () => {\r\n    if (!song) return;\r\n    const newSteps = transposeSteps + 1;\r\n    setTransposeSteps(newSteps);\r\n    setDisplayedLyrics(transposeLyrics(song.lyricsWithChords, newSteps));\r\n  };\r\n\r\n  const handleTransposeDown = () => {\r\n    if (!song) return;\r\n    const newSteps = transposeSteps - 1;\r\n    setTransposeSteps(newSteps);\r\n    setDisplayedLyrics(transposeLyrics(song.lyricsWithChords, newSteps));\r\n  };\r\n\r\n  if (!song) {\r\n    return (\r\n      <div style={detailsPlaceholderStyle}>\r\n        <p>Выберите песню, чтобы увидеть текст с аккордами</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={detailsContentWrapper}>\r\n      <div style={detailsContentStyle}>\r\n        <div style={headerStyle}>\r\n          <h2 style={titleStyle}>{song.title}</h2>\r\n          {user && (\r\n            <button\r\n              onClick={toggleFavorite}\r\n              style={{\r\n                ...likeButtonStyle,\r\n                backgroundColor: isFavorite ? '#d9534f' : '#28a745',\r\n              }}\r\n            >\r\n              {isFavorite ? 'Убрать из избранного' : 'В избранное'}\r\n            </button>\r\n          )}\r\n        </div>\r\n\r\n        <h4 style={authorStyle}>Исполнитель: {song.author}</h4>\r\n\r\n        {/* === Блок транспонирования === */}\r\n        <div style={transposeControlsWrapper}>\r\n          <button onClick={handleTransposeDown} style={transposeButtonStyle}>↓</button>\r\n          <span style={transposeInfoStyle}>\r\n            Тональность: {transposeSteps >= 0 ? `+${transposeSteps}` : transposeSteps} полутоны\r\n          </span>\r\n          <button onClick={handleTransposeUp} style={transposeButtonStyle}>↑</button>\r\n        </div>\r\n\r\n        {/* === Отображаем текст (исходный или транспонированный) === */}\r\n        <pre style={lyricsStyle}>{displayedLyrics}</pre>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n/** Стили */\r\nconst detailsContentWrapper = {\r\n  display: 'flex',\r\n  justifyContent: 'center',\r\n  width: '100%',\r\n};\r\n\r\nconst detailsContentStyle = {\r\n  width: '100%',\r\n  maxWidth: '800px',\r\n  backgroundColor: '#3d4044',\r\n  padding: '1.5rem',\r\n  borderRadius: '8px',\r\n  boxShadow: '0 0 10px rgba(0,0,0,0.5)',\r\n  fontSize: '1.2rem',\r\n  lineHeight: '1.6',\r\n};\r\n\r\nconst detailsPlaceholderStyle = {\r\n  display: 'flex',\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n  width: '100%',\r\n  color: '#ccc',\r\n};\r\n\r\nconst headerStyle = {\r\n  display: 'flex',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'center',\r\n};\r\n\r\nconst titleStyle = {\r\n  marginTop: 0,\r\n  fontSize: '2rem',\r\n  fontWeight: 'bold',\r\n};\r\n\r\nconst authorStyle = {\r\n  color: '#ccc',\r\n  marginBottom: '1rem',\r\n  fontSize: '1.3rem',\r\n};\r\n\r\nconst transposeControlsWrapper = {\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  marginBottom: '1rem',\r\n};\r\n\r\nconst transposeButtonStyle = {\r\n  padding: '0.3rem 0.6rem',\r\n  fontSize: '1.2rem',\r\n  margin: '0 0.5rem',\r\n  borderRadius: '4px',\r\n  border: 'none',\r\n  cursor: 'pointer',\r\n  backgroundColor: '#555',\r\n  color: '#fff',\r\n};\r\n\r\nconst transposeInfoStyle = {\r\n  color: '#fff',\r\n  fontSize: '1rem',\r\n};\r\n\r\nconst lyricsStyle = {\r\n  whiteSpace: 'pre-wrap',\r\n  fontFamily: 'monospace',\r\n  fontSize: '1.2rem',\r\n  marginTop: '1rem',\r\n  color: '#fff',\r\n};\r\n\r\nconst likeButtonStyle = {\r\n  padding: '0.5rem 1rem',\r\n  fontSize: '1rem',\r\n  border: 'none',\r\n  borderRadius: '6px',\r\n  color: '#fff',\r\n  cursor: 'pointer',\r\n};\r\n\r\nexport default SongDetails;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}